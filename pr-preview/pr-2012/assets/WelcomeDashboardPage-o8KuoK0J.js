import { ea as t, er as E1, e5 as D1, e7 as v, fe as b1, en as L1, fD as W, fE as J, fC as Q, ho as N1, f3 as K1, iK as m2, iL as T2, iM as _2, iN as O2, iO as N2, eA as n1, eb as m, ep as w, es as a1, gC as g2, ey as R2, eq as R, g1 as i1, ex as U2, iH as z2, ez as G2, eu as $2, ev as l1, h6 as W1, gL as q2, g6 as x1, gw as K2, fP as z1, iP as G1, gn as W2, iQ as J2, eP as C2, __tla as __tla_0 } from "./index-C2jH2XEK.js";
import { P as Q2, a as Y2, u as X2, S as t3, __tla as __tla_1 } from "./Socialhandles-DjfHU2Lb.js";
import { u as A1, T as e3, V as s3, U as i3, N as n3, __tla as __tla_2 } from "./VerifiedChannelTooltipContent-mmw9SpsD.js";
import { U as J1, a as Q1, __tla as __tla_3 } from "./UnlockProfileWrapper-DJ8_s0pY.js";
import { A as r3, __tla as __tla_4 } from "./Add-DZK1B-7Z.js";
import { D as o3, A as a3, __tla as __tla_5 } from "./Dash-DzPV2iNB.js";
import { C as l3, __tla as __tla_6 } from "./ChannelDetailsCard-DJJUrpfw.js";
import { P as c3, __tla as __tla_7 } from "./PushLogo-DYIqM7Nx.js";
import { f as R1, __tla as __tla_8 } from "./StakingHelper-DsJguOda.js";
import { C as d3, __tla as __tla_9 } from "./ContentLayout-CMvbJl9T.js";
import { __tla as __tla_10 } from "./Tick-DhJPBf-n.js";
import { __tla as __tla_11 } from "./useSocialHandles-BO2RzoSJ.js";
import { __tla as __tla_12 } from "./index.esm-BAVu81oq.js";
import "./Common.form-NbJ1DVkQ.js";
import { __tla as __tla_13 } from "./CopyButton-CYVHncGx.js";
import { __tla as __tla_14 } from "./Copy-CB60wX7c.js";
import { __tla as __tla_15 } from "./Discord-DxEiCyO5.js";
import { __tla as __tla_16 } from "./useDisclosure-ODhnk-X-.js";
let t6;
let __tla = Promise.all([
  (() => {
    try {
      return __tla_0;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_1;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_2;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_3;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_4;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_5;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_6;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_7;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_8;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_9;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_10;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_11;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_12;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_13;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_14;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_15;
    } catch {
    }
  })(),
  (() => {
    try {
      return __tla_16;
    } catch {
    }
  })()
]).then(async () => {
  const C3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(E1, {
      componentName: "Chat",
      icon: t.jsx("svg", {
        style: {
          width: "inherit",
          height: "inherit"
        },
        viewBox: "0 0 32 32",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: t.jsx("path", {
          d: "M5.57428 26.516V13.2243C5.57428 8.9993 8.9993 5.57428 13.2243 5.57428H19.8243C24.3806 5.57428 28.0743 9.26793 28.0743 13.8243C28.0743 18.3806 24.3806 22.0743 19.8243 22.0743H11.488C11.128 22.0743 10.7816 22.2113 10.519 22.4575L5.99527 26.6984C5.8356 26.8481 5.57428 26.7349 5.57428 26.516Z",
          stroke: "currentColor",
          "stroke-width": "1.5"
        })
      }),
      ...i
    });
  }, u3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(E1, {
      componentName: "InboxBell",
      icon: t.jsxs("svg", {
        width: "inherit",
        height: "inherit",
        viewBox: "0 0 32 32",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M13.36 5.32051L13.711 6.25689L14.1438 6.09464L14.3007 5.65978L13.36 5.32051ZM20.3848 5.3336L19.4426 5.66871L19.597 6.10273L20.0271 6.26747L20.3848 5.3336ZM27.6096 20.7373L26.7644 21.2718L26.769 21.279L26.7736 21.2861L27.6096 20.7373ZM27.6212 22.4382L26.7781 21.9002L26.7735 21.9077L27.6212 22.4382ZM26.9436 23.0594L26.4777 22.1746L26.4777 22.1746L26.9436 23.0594ZM26.016 23.2833L26.0218 22.2833H26.016V23.2833ZM7.72401 23.2833V22.2833L7.71818 22.2833L7.72401 23.2833ZM6.79641 23.0594L7.26229 22.1746L7.26229 22.1746L6.79641 23.0594ZM6.11884 22.4382L6.96656 21.9077L6.96183 21.9002L6.11884 22.4382ZM5.87003 21.5863L4.87005 21.5795L5.87003 21.5863ZM6.13039 20.7373L6.96635 21.2861L6.97104 21.279L6.9756 21.2718L6.13039 20.7373ZM7.63162 13.1416H8.63162L8.63162 13.1403L7.63162 13.1416ZM8.33176 9.90579L9.243 10.3177L8.33176 9.90579ZM10.3341 7.16251L11.0091 7.90034L10.3341 7.16251ZM13.3328 5.33074L12.979 4.39542L12.979 4.39542L13.3328 5.33074ZM14.3007 5.65978C14.6327 4.73922 15.6217 3.99996 16.87 3.99996V1.99996C14.8461 1.99996 13.0595 3.2062 12.4193 4.98125L14.3007 5.65978ZM16.87 3.99996C18.1226 3.99996 19.1137 4.74403 19.4426 5.66871L21.3269 4.99848C20.6922 3.214 18.9004 1.99996 16.87 1.99996V3.99996ZM27.1084 13.2367C27.1084 9.21727 24.4323 5.81276 20.7424 4.39973L20.0271 6.26747C23.0457 7.42341 25.1084 10.1505 25.1084 13.2367H27.1084ZM27.1084 13.9868V13.2367H25.1084V13.9868H27.1084ZM28.4548 20.2029C27.8917 19.3123 27.1084 17.4558 27.1084 13.9868H25.1084C25.1084 17.7648 25.9649 20.0073 26.7644 21.2718L28.4548 20.2029ZM28.8699 21.5795C28.8666 21.0825 28.7169 20.6018 28.4456 20.1885L26.7736 21.2861C26.8391 21.3859 26.8693 21.4917 26.87 21.5931L28.8699 21.5795ZM28.4641 22.9761C28.7301 22.5593 28.8733 22.0766 28.8699 21.5795L26.87 21.5931C26.8707 21.6945 26.842 21.8002 26.7782 21.9002L28.4641 22.9761ZM27.4095 23.9443C27.8404 23.7174 28.2091 23.3838 28.4688 22.9687L26.7735 21.9077C26.7099 22.0093 26.6109 22.1045 26.4777 22.1746L27.4095 23.9443ZM26.0102 24.2833C26.4963 24.2861 26.9789 24.171 27.4095 23.9443L26.4777 22.1746C26.3442 22.2449 26.1865 22.2843 26.0218 22.2833L26.0102 24.2833ZM7.72401 24.2833H26.016V22.2833H7.72401V24.2833ZM6.33053 23.9443C6.7611 24.171 7.24368 24.2861 7.72983 24.2833L7.71818 22.2833C7.55349 22.2843 7.39582 22.2449 7.26229 22.1746L6.33053 23.9443ZM5.27115 22.9687C5.53094 23.3838 5.89961 23.7174 6.33053 23.9443L7.26229 22.1746C7.12911 22.1045 7.03011 22.0093 6.96653 21.9077L5.27115 22.9687ZM4.87005 21.5795C4.86668 22.0766 5.00986 22.5593 5.27585 22.9761L6.96183 21.9002C6.89801 21.8002 6.86932 21.6945 6.87001 21.5931L4.87005 21.5795ZM5.29442 20.1885C5.02312 20.6018 4.87343 21.0825 4.87005 21.5795L6.87001 21.5931C6.8707 21.4917 6.90085 21.3859 6.96635 21.2861L5.29442 20.1885ZM6.63162 13.9868C6.63162 17.4558 5.84831 19.3123 5.28517 20.2029L6.9756 21.2718C7.77512 20.0073 8.63162 17.7648 8.63162 13.9868H6.63162ZM6.63162 13.1416V13.9868H8.63162V13.1416H6.63162ZM7.42051 9.49392C6.89894 10.6479 6.6299 11.8882 6.63162 13.143L8.63162 13.1403C8.6303 12.1746 8.8371 11.2157 9.243 10.3177L7.42051 9.49392ZM9.65911 6.42467C8.70428 7.29816 7.94194 8.34027 7.42051 9.49392L9.243 10.3177C9.64904 9.41931 10.2476 8.59697 11.0091 7.90034L9.65911 6.42467ZM12.979 4.39542C11.7426 4.8631 10.6138 5.55135 9.65911 6.42467L11.0091 7.90034C11.7708 7.20354 12.68 6.64684 13.6866 6.26607L12.979 4.39542ZM13.009 4.38414C12.999 4.38789 12.989 4.39165 12.979 4.39542L13.6866 6.26607C13.6948 6.26299 13.7029 6.25993 13.711 6.25689L13.009 4.38414Z",
            fill: "currentColor"
          }),
          t.jsx("path", {
            d: "M16.87 26.9999C19.0791 26.9999 20.87 25.3475 20.87 23.3091H12.87C12.87 25.3475 14.6609 26.9999 16.87 26.9999Z",
            stroke: "currentColor",
            "stroke-width": "2",
            "stroke-linecap": "round"
          })
        ]
      }),
      ...i
    });
  }, f3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(E1, {
      componentName: "EmptyInbox",
      icon: t.jsxs("svg", {
        width: "inherit",
        height: "inherit",
        viewBox: "0 0 48 49",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsxs("g", {
            "clip-path": "url(#clip0_2971_9021)",
            children: [
              t.jsx("path", {
                d: "M19.5 37.5637H28.5",
                stroke: "currentColor",
                "stroke-width": "3",
                "stroke-linecap": "round",
                "stroke-linejoin": "round"
              }),
              t.jsx("path", {
                d: "M27.1972 11.0817L25.7132 11.3004C25.7958 11.8604 26.1864 12.3262 26.7235 12.505L27.1972 11.0817ZM31.1593 13.5292L30.0986 14.5898V14.5898L31.1593 13.5292ZM36.2201 31.3761L37.5192 30.6261L37.5183 30.6246L36.2201 31.3761ZM36.3709 31.9376L34.8709 31.939L36.3709 31.9376ZM36.2211 32.4994L34.9208 31.7517L34.9208 31.7517L36.2211 32.4994ZM35.8109 32.9114L35.0575 31.6144L35.0575 31.6144L35.8109 32.9114ZM35.2498 33.0636V34.5636L35.2551 34.5636L35.2498 33.0636ZM12.7498 33.0636L12.7408 34.5636H12.7498V33.0636ZM12.1897 32.9104L12.9456 31.6147H12.9456L12.1897 32.9104ZM11.7806 32.4982L10.4793 33.2443L10.4793 33.2443L11.7806 32.4982ZM11.6316 31.9369L10.1316 31.9347V31.9347L11.6316 31.9369ZM11.7823 31.3761L10.4837 30.6254L10.4833 30.6261L11.7823 31.3761ZM16.8404 13.5292L17.901 14.5898L16.8404 13.5292ZM20.8027 11.0816L21.2764 12.5049C21.8134 12.3262 22.2041 11.8603 22.2867 11.3004L20.8027 11.0816ZM26.7235 12.505C27.9837 12.9244 29.1419 13.6331 30.0986 14.5898L32.2199 12.4685C30.9304 11.179 29.3692 10.2237 27.6709 9.65849L26.7235 12.505ZM30.0986 14.5898C31.7161 16.2073 32.6248 18.4011 32.6248 20.6886H35.6248C35.6248 17.6055 34.4001 14.6486 32.2199 12.4685L30.0986 14.5898ZM32.6248 20.6886C32.6248 25.89 33.8193 30.223 34.922 32.1277L37.5183 30.6246C36.7647 29.323 35.6248 25.5617 35.6248 20.6886H32.6248ZM34.9211 32.1261C34.8882 32.0692 34.8709 32.0047 34.8709 31.939L37.8709 31.9363C37.8705 31.4763 37.7492 31.0245 37.5192 30.6261L34.9211 32.1261ZM34.8709 31.939C34.8708 31.8733 34.888 31.8087 34.9208 31.7517L37.5215 33.2471C37.7508 32.8483 37.8713 32.3963 37.8709 31.9363L34.8709 31.939ZM34.9208 31.7517C34.9535 31.6947 35.0007 31.6474 35.0575 31.6144L36.5644 34.2085C36.9621 33.9774 37.2922 33.6459 37.5215 33.2471L34.9208 31.7517ZM35.0575 31.6144C35.1143 31.5814 35.1788 31.5639 35.2445 31.5636L35.2551 34.5636C35.7151 34.562 36.1666 34.4395 36.5644 34.2085L35.0575 31.6144ZM35.2498 31.5636H12.7498V34.5636H35.2498V31.5636ZM12.7589 31.5637C12.8245 31.5641 12.8889 31.5817 12.9456 31.6147L11.4338 34.206C11.8307 34.4375 12.2814 34.5608 12.7408 34.5636L12.7589 31.5637ZM12.9456 31.6147C13.0023 31.6478 13.0493 31.6952 13.0819 31.7521L10.4793 33.2443C10.7078 33.6429 11.037 33.9745 11.4338 34.206L12.9456 31.6147ZM13.0819 31.7521C13.1146 31.8091 13.1317 31.8736 13.1316 31.9392L10.1316 31.9347C10.1309 32.3941 10.2508 32.8457 10.4793 33.2443L13.0819 31.7521ZM13.1316 31.9392C13.1315 32.0049 13.1142 32.0693 13.0813 32.1262L10.4833 30.6261C10.2536 31.024 10.1323 31.4752 10.1316 31.9347L13.1316 31.9392ZM13.081 32.1268C14.1818 30.2224 15.3748 25.8883 15.3748 20.6886H12.3748C12.3748 25.5605 11.2363 29.3236 10.4837 30.6254L13.081 32.1268ZM15.3748 20.6886C15.3748 18.4011 16.2835 16.2073 17.901 14.5898L15.7797 12.4685C13.5996 14.6486 12.3748 17.6055 12.3748 20.6886H15.3748ZM17.901 14.5898C18.8578 13.6331 20.0161 12.9243 21.2764 12.5049L20.329 9.6584C18.6307 10.2236 17.0693 11.1789 15.7797 12.4685L17.901 14.5898ZM22.2867 11.3004C22.4181 10.4084 23.1598 9.77051 23.9999 9.77051V6.77051C21.5989 6.77051 19.6564 8.57232 19.3187 10.8629L22.2867 11.3004ZM23.9999 9.77051C24.8401 9.77051 25.5818 10.4084 25.7132 11.3004L28.6812 10.863C28.3436 8.57238 26.401 6.77051 23.9999 6.77051V9.77051Z",
                fill: "currentColor"
              })
            ]
          }),
          t.jsx("defs", {
            children: t.jsx("clipPath", {
              id: "clip0_2971_9021",
              children: t.jsx("rect", {
                width: "36",
                height: "36",
                fill: "white",
                transform: "translate(6 6.06372)"
              })
            })
          })
        ]
      }),
      ...i
    });
  }, k2 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(E1, {
      componentName: "NextIconSlider",
      icon: t.jsxs("svg", {
        width: "inherit",
        height: "inherit",
        viewBox: "0 0 32 32",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M16 28C22.6274 28 28 22.6274 28 16C28 9.37258 22.6274 4 16 4C9.37258 4 4 9.37258 4 16C4 22.6274 9.37258 28 16 28Z",
            stroke: "currentColor",
            "stroke-width": "1.5",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M14.2137 10.3827L19.8311 16L14.2137 21.6173",
            stroke: "currentColor",
            "stroke-width": "1.5",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          })
        ]
      }),
      ...i
    });
  }, j2 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(E1, {
      componentName: "PrevIconSlider",
      icon: t.jsxs("svg", {
        width: "inherit",
        height: "inherit",
        viewBox: "0 0 32 32",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M16 28C9.37258 28 4 22.6274 4 16C4 9.37258 9.37258 4 16 4C22.6274 4 28 9.37258 28 16C28 22.6274 22.6274 28 16 28Z",
            stroke: "currentColor",
            "stroke-width": "1.5",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M18.0331 10.3827L12.4158 16L18.0331 21.6173",
            stroke: "currentColor",
            "stroke-width": "1.5",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          })
        ]
      }),
      ...i
    });
  }, h3 = () => {
    const { provider: e, account: s, chainId: i } = D1(), [r, o] = v.useState(), [a, n] = v.useState(), [c, l] = v.useState(), [d, p] = v.useState(), [C, h] = v.useState(), g = e == null ? void 0 : e.getSigner(s), { data: f } = b1({
      queryKey: [
        "poolStats"
      ],
      enabled: !!e && !!c,
      queryFn: () => N1.getInstance().getPoolStats(e),
      staleTime: 1 / 0,
      refetchOnWindowFocus: false,
      refetchInterval: 36e5,
      retry: 2
    }), { data: L } = b1({
      queryKey: [
        "pushPoolStats"
      ],
      enabled: !!e && !!d,
      queryFn: () => N1.getInstance().getUserDataPUSH(e),
      staleTime: 1 / 0,
      refetchOnWindowFocus: false,
      refetchInterval: 36e5,
      retry: 2
    });
    return v.useEffect(() => {
      if (i !== L1.coreContractChain && i !== L1.mainnetCoreContractChain) return;
      let x = new W(J.stakingV2, Q.stakingV2, g), u = new W(J.pushToken, Q.pushToken, g), k = new W(J.pushCoreV2, Q.pushCoreV2, g), F = new W(J.yieldFarmLP, Q.yieldFarming, g), Z = new W(J.uniswapV2Router02, Q.uniswapV2Router02, g);
      if (n(x), o(u), p(k), l(F), h(Z), g && s) {
        var y = e == null ? void 0 : e.getSigner(s);
        let E = new W(J.stakingV2, Q.stakingV2, y), M = new W(J.pushToken, Q.pushToken, y), b = new W(J.pushCoreV2, Q.pushCoreV2, y), D = new W(J.yieldFarmLP, Q.yieldFarming, y), V = new W(J.uniswapV2Router02, Q.uniswapV2Router02, y);
        n(E), o(M), p(b), l(D), h(V);
      }
      N1.getInstance().init(s, x, u, k, F, Z);
    }, [
      s,
      i
    ]), {
      poolStats: f,
      pushPoolStats: L == null ? void 0 : L[0]
    };
  }, p3 = () => K1({
    method: "GET",
    url: `${m2}/analytics/chat/chats`
  }).then((e) => e.data.totalMessages), L3 = (e) => {
    const s = e.notificationAnalytics;
    let i = 0;
    return s.forEach((r) => {
      var _a;
      for (let o in r) o !== "date" && (i += (_a = r[o]) == null ? void 0 : _a.notification);
    }), i;
  };
  function x3({ start: e, end: s, interval: i }) {
    for (var r = [], o = new Date(e); o <= new Date(s); o.setDate(o.getDate() + i)) r.push(new Date(o));
    const a = r[r.length - 1];
    return new Date(a).getDate() !== new Date(s).getDate() && r.push(new Date(s)), r;
  }
  const m3 = (e, s) => {
    const i = e == null ? void 0 : e.subscriberAnalytics;
    let r = 0;
    const o = x3({
      start: s.start,
      end: s.end,
      interval: 1
    });
    let a = [];
    for (let n = 0; n < (i == null ? void 0 : i.length); n++) {
      let c = 0, l = "";
      for (let d in i[n]) d === "date" ? l = i[n][d] : c += i[n][d].subscriber;
      a.push({
        date: l,
        subscribers: c
      });
    }
    for (let n = 0; n < o.length; n++) for (let c = 0; c < a.length; c++) if (new Date(a[c].date).toDateString() === new Date(o[n]).toDateString()) {
      r += a[c].subscribers;
      break;
    }
    return r;
  }, g3 = () => K1({
    method: "GET",
    url: `${T2}/analytics/notification`,
    params: {
      startDate: /* @__PURE__ */ new Date("2022-01-01"),
      endDate: /* @__PURE__ */ new Date(),
      channel: "All",
      source: "All"
    }
  }).then((e) => L3(e.data)), k3 = () => {
    const e = /* @__PURE__ */ new Date("2022-01-01"), s = /* @__PURE__ */ new Date();
    return K1({
      method: "GET",
      url: `${m2}/analytics/subscriber`,
      params: {
        startDate: e,
        endDate: s,
        channel: "All",
        source: "All"
      }
    }).then((i) => m3(i.data, {
      start: e,
      end: s
    }));
  }, j3 = () => b1({
    queryKey: [
      _2
    ],
    queryFn: p3,
    staleTime: 1 / 0,
    refetchOnWindowFocus: false
  }), F3 = () => b1({
    queryKey: [
      O2
    ],
    queryFn: g3,
    staleTime: 1 / 0,
    refetchOnWindowFocus: false
  }), M3 = () => b1({
    queryKey: [
      N2
    ],
    queryFn: k3,
    staleTime: 1 / 0,
    refetchOnWindowFocus: false
  }), b3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "Chat",
      illustration: t.jsxs("svg", {
        width: i.width ?? "56",
        height: i.height ?? "44",
        viewBox: "0 0 57 44",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M10.31 43.7705C10.31 40.5669 7.72509 37.964 4.5437 37.964C7.72509 37.964 10.31 35.3611 10.31 32.1575C10.31 35.3611 12.8948 37.964 16.0762 37.964C12.8948 37.964 10.31 40.5669 10.31 43.7705Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M52.4129 19.3371C52.4129 16.7886 50.3565 14.7179 47.8257 14.7179C50.3565 14.7179 52.4129 12.6472 52.4129 10.0987C52.4129 12.6472 54.4692 14.7179 57 14.7179C54.4692 14.7179 52.4129 16.7886 52.4129 19.3371Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M31.0367 42.292C26.8735 42.292 23.4931 38.9048 23.4931 34.7484V27.6569C23.4931 26.9214 24.0936 26.3209 24.8291 26.3209H47.2035C51.6028 26.3209 55.1857 29.9038 55.1857 34.3031C55.1857 38.7024 51.6028 42.2853 47.2035 42.2853H31.0367V42.292Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M33.1575 21.0634C38.6249 21.0634 43.0643 16.7363 43.0643 11.4265V2.36712C43.0643 1.42756 42.2757 0.6604 41.3098 0.6604H11.926C6.14845 0.6604 1.44315 5.23751 1.44315 10.8576C1.44315 16.4777 6.14845 21.0548 11.926 21.0548H33.1575V21.0634Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M32.6548 36.4623C31.4605 36.4623 30.4956 35.4974 30.4956 34.3099C30.4956 33.1223 31.4672 32.1575 32.6548 32.1575C33.8423 32.1575 34.814 33.1223 34.814 34.3099C34.814 35.4974 33.8423 36.4623 32.6548 36.4623Z",
            fill: "#F3AEFF",
            stroke: "#17181B"
          }),
          t.jsx("path", {
            d: "M39.1606 36.4623C37.9663 36.4623 37.0015 35.4974 37.0015 34.3099C37.0015 33.1223 37.9731 32.1575 39.1606 32.1575C40.3482 32.1575 41.3198 33.1223 41.3198 34.3099C41.3198 35.4974 40.3482 36.4623 39.1606 36.4623Z",
            fill: "#F3AEFF",
            stroke: "#17181B"
          }),
          t.jsx("path", {
            d: "M45.6665 36.4623C44.4722 36.4623 43.5073 35.4974 43.5073 34.3099C43.5073 33.1223 44.479 32.1575 45.6665 32.1575C46.854 32.1575 47.8257 33.1223 47.8257 34.3099C47.8257 35.4974 46.854 36.4623 45.6665 36.4623Z",
            fill: "#F3AEFF",
            stroke: "#17181B"
          }),
          t.jsx("path", {
            d: "M10.3101 8.27527H34.1975",
            stroke: "#17181B",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M10.3101 13.8986H27.8573",
            stroke: "#17181B",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("circle", {
            cx: "12.5268",
            cy: "20.2164",
            r: "7.3481",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.27"
          }),
          t.jsx("path", {
            d: "M9.97559 22.1823C10.3958 23.1763 11.3798 23.8737 12.5268 23.8737C13.6738 23.8737 14.6578 23.1763 15.078 22.1823",
            stroke: "#17181B",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("circle", {
            cx: "10.1241",
            cy: "18.2874",
            r: "1.07354",
            fill: "#17181B"
          }),
          t.jsx("circle", {
            cx: "14.9295",
            cy: "18.2874",
            r: "1.07354",
            fill: "#17181B"
          })
        ]
      }),
      ...i
    });
  }, w3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "ChatDark",
      illustration: t.jsxs("svg", {
        width: i.width ?? "57",
        height: i.height ?? "45",
        viewBox: "0 0 57 45",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M10.31 44.5411C10.31 41.3375 7.72509 38.7346 4.5437 38.7346C7.72509 38.7346 10.31 36.1316 10.31 32.928C10.31 36.1316 12.8948 38.7346 16.0762 38.7346C12.8948 38.7346 10.31 41.3375 10.31 44.5411Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M52.4129 20.1077C52.4129 17.5591 50.3565 15.4885 47.8257 15.4885C50.3565 15.4885 52.4129 13.4178 52.4129 10.8693C52.4129 13.4178 54.4692 15.4885 57 15.4885C54.4692 15.4885 52.4129 17.5591 52.4129 20.1077Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M31.0368 43.0626C26.8736 43.0626 23.4932 39.6754 23.4932 35.519V28.4275C23.4932 27.692 24.0937 27.0915 24.8291 27.0915H47.2036C51.6029 27.0915 55.1857 30.6744 55.1857 35.0737C55.1857 39.473 51.6029 43.0559 47.2036 43.0559H31.0368V43.0626Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M33.1575 21.834C38.6249 21.834 43.0643 17.5069 43.0643 12.1971V3.13769C43.0643 2.19813 42.2757 1.43097 41.3098 1.43097H11.926C6.14845 1.43097 1.44315 6.00808 1.44315 11.6282C1.44315 17.2483 6.14845 21.8254 11.926 21.8254H33.1575V21.834Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M32.6548 37.2329C31.4605 37.2329 30.4956 36.268 30.4956 35.0805C30.4956 33.8929 31.4672 32.928 32.6548 32.928C33.8423 32.928 34.814 33.8929 34.814 35.0805C34.814 36.268 33.8423 37.2329 32.6548 37.2329Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M39.1606 37.2329C37.9663 37.2329 37.0015 36.268 37.0015 35.0805C37.0015 33.8929 37.9731 32.928 39.1606 32.928C40.3482 32.928 41.3198 33.8929 41.3198 35.0805C41.3198 36.268 40.3482 37.2329 39.1606 37.2329Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M45.6665 37.2329C44.4722 37.2329 43.5073 36.268 43.5073 35.0805C43.5073 33.8929 44.479 32.928 45.6665 32.928C46.854 32.928 47.8257 33.8929 47.8257 35.0805C47.8257 36.268 46.854 37.2329 45.6665 37.2329Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M10.3101 9.04584H34.1975",
            stroke: "#F5F6F8",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M10.3101 14.6691H27.8573",
            stroke: "#F5F6F8",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("circle", {
            cx: "12.5268",
            cy: "20.9869",
            r: "7.3481",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.27"
          }),
          t.jsx("path", {
            d: "M9.97559 22.9529C10.3958 23.9468 11.3798 24.6443 12.5268 24.6443C13.6738 24.6443 14.6578 23.9468 15.078 22.9529",
            stroke: "#F5F6F8",
            "stroke-width": "1.27",
            "stroke-linecap": "round"
          }),
          t.jsx("circle", {
            cx: "10.1241",
            cy: "19.058",
            r: "1.07354",
            fill: "#F5F6F8"
          }),
          t.jsx("circle", {
            cx: "14.9295",
            cy: "19.058",
            r: "1.07354",
            fill: "#F5F6F8"
          })
        ]
      }),
      ...i
    });
  }, Z3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "Communication",
      illustration: t.jsxs("svg", {
        width: i.width ?? "56",
        height: i.height ?? "52",
        viewBox: "0 0 56 52",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M40.3385 17.4475C39.2533 13.5323 36.5592 10.3474 33.0885 8.79906C32.4344 6.65659 30.5452 5.10809 28.3167 5.10809C26.0954 5.10809 24.2113 6.64664 23.5513 8.77839C23.539 8.78376 23.5268 8.78915 23.5145 8.79456C21.9918 9.46555 20.6083 10.4501 19.4432 11.6918C18.2782 12.9335 17.3544 14.4079 16.7248 16.0307C16.0952 17.6535 15.7722 19.3927 15.7742 21.1487M41.6526 29.84C42.0265 31.3168 42.481 32.3953 42.8973 33.1625C43.126 33.5682 43.248 34.032 43.2508 34.5052C43.2536 34.9785 43.1369 35.4439 42.913 35.8526C42.6935 36.2612 42.376 36.6004 41.9931 36.8352C41.6102 37.0701 41.1756 37.1923 40.7338 37.1893H15.8997C15.4579 37.1923 15.0232 37.0701 14.6403 36.8352C14.2574 36.6004 13.9399 36.2612 13.7204 35.8526C13.4965 35.4439 13.3799 34.9785 13.3826 34.5052C13.3854 34.032 13.5075 33.5682 13.7361 33.1625C14.1925 32.3215 14.6948 31.1062 15.0865 29.4022",
            stroke: "#17181B",
            "stroke-width": "1.26925"
          }),
          t.jsx("path", {
            d: "M28.3168 42.9344C31.3161 42.9344 33.7474 40.3622 33.7474 37.1893H22.8862C22.8862 40.3622 25.3176 42.9344 28.3168 42.9344Z",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M43.7951 28.7035L43.8572 28.6564L44.0316 28.8871C44.1243 29.0096 44.2618 29.0903 44.4139 29.1115C44.566 29.1326 44.7203 29.0925 44.8429 28.9998L45.3054 28.6502L47.4008 31.4225C47.4466 31.4832 47.504 31.5343 47.5696 31.5728C47.6352 31.6113 47.7077 31.6365 47.783 31.647C47.8583 31.6574 47.935 31.653 48.0086 31.6338C48.0822 31.6146 48.1513 31.5811 48.212 31.5353L50.0599 30.1383C50.1412 30.0767 50.2049 29.9947 50.2445 29.9006C50.284 29.8065 50.298 29.7037 50.2851 29.6024L49.7313 25.3042L51.4783 23.984C52.7286 23.0407 53.7686 21.8472 54.5319 20.4795C55.2952 19.1118 55.765 17.6001 55.9114 16.0407C55.925 15.8965 55.8841 15.7525 55.7968 15.637C55.7095 15.5215 55.582 15.4429 55.4396 15.4166C53.8993 15.1354 52.3174 15.1767 50.7939 15.5379C49.2703 15.8992 47.8383 16.5725 46.5882 17.5154L44.8413 18.836L40.857 17.1311C40.7632 17.0909 40.6603 17.0763 40.559 17.0887C40.4577 17.1011 40.3614 17.1401 40.28 17.2017L38.4325 18.5988C38.3718 18.6447 38.3207 18.702 38.2822 18.7676C38.2437 18.8332 38.2185 18.9057 38.208 18.9811C38.1975 19.0564 38.202 19.1331 38.2212 19.2067C38.2404 19.2803 38.2738 19.3494 38.3197 19.41L40.4156 22.182L39.9531 22.5316C39.8306 22.6243 39.7499 22.7618 39.7287 22.9139C39.7076 23.066 39.7478 23.2203 39.8404 23.3429L40.015 23.5738L39.9524 23.6211C38.9572 24.3693 38.1202 25.3075 37.4899 26.3813C36.8596 27.4552 36.4485 28.6433 36.2803 29.8771C36.2592 30.0292 36.2993 30.1835 36.392 30.3061C36.4846 30.4286 36.6221 30.5093 36.7743 30.5305C38.0072 30.7051 39.2625 30.6335 40.4676 30.3199C41.6727 30.0063 42.8037 29.4569 43.7951 28.7035ZM49.0931 29.417L47.9752 30.2621L46.2291 27.9517L48.6669 26.1088L49.0931 29.417ZM39.5927 19.1734L40.7108 18.3284L43.7774 19.6406L41.3396 21.4835L39.5927 19.1734ZM47.2867 18.4393C49.4041 16.8427 52.0614 16.1366 54.692 16.4716C54.297 19.0939 52.8931 21.458 50.7796 23.0596L44.6061 27.7266L43.2089 25.8783L45.5193 24.1324C45.6419 24.0397 45.7226 23.9022 45.7438 23.75C45.7649 23.5978 45.7247 23.4434 45.6321 23.3209C45.5394 23.1983 45.4019 23.1176 45.2497 23.0964C45.0975 23.0753 44.9431 23.1154 44.8206 23.2081L42.5104 24.9545L41.1132 23.1063L47.2867 18.4393ZM40.6506 24.5457L40.7135 24.4982L41.5865 25.6531L41.1249 26.0021C41.0053 26.0958 40.9274 26.2327 40.9078 26.3833C40.8882 26.5338 40.9285 26.6861 41.0201 26.8073C41.1117 26.9284 41.2472 27.0087 41.3974 27.0309C41.5477 27.0532 41.7006 27.0155 41.8233 26.926L42.285 26.577L43.1582 27.7322L43.0958 27.7796C41.5034 28.9899 39.5262 29.5817 37.5307 29.4451C37.9434 27.4881 39.0517 25.7473 40.6506 24.5457Z",
            fill: "#17181B"
          }),
          t.jsx("path", {
            d: "M52.101 18.4312C51.823 18.0636 51.4105 17.8214 50.9541 17.7579C50.4976 17.6943 50.0346 17.8146 49.6669 18.0923C49.4812 18.2285 49.3243 18.4009 49.2056 18.5982C49.0869 18.7955 49.0086 19.0145 48.9753 19.2423C48.9419 19.4702 48.9542 19.7024 49.0114 19.9255C49.0686 20.1485 49.1696 20.358 49.3084 20.5417C49.4473 20.7254 49.6213 20.8797 49.8203 20.9955C50.0194 21.1114 50.2394 21.1865 50.4677 21.2166C50.6961 21.2466 50.9281 21.231 51.1503 21.1706C51.3725 21.1102 51.5805 21.0062 51.7622 20.8647C52.1204 20.5802 52.3555 20.1688 52.4185 19.7157C52.4816 19.2627 52.3679 18.8027 52.101 18.4312ZM50.2525 19.828C50.1632 19.7044 50.125 19.5511 50.146 19.4001C50.167 19.2491 50.2455 19.112 50.3652 19.0174L50.3653 19.0168C50.4566 18.9477 50.5665 18.9073 50.6808 18.9006C50.7952 18.8939 50.909 18.9213 51.0078 18.9792C51.1066 19.0372 51.186 19.1232 51.2359 19.2263C51.2858 19.3294 51.3041 19.445 51.2883 19.5585C51.2725 19.672 51.2234 19.7782 51.1473 19.8638C51.0711 19.9494 50.9713 20.0104 50.8604 20.0393C50.7496 20.0681 50.6326 20.0634 50.5244 20.0258C50.4162 19.9882 50.3216 19.9194 50.2525 19.828Z",
            fill: "#17181B"
          }),
          t.jsx("path", {
            d: "M34.6488 31.4915C18.2675 41.1428 3.25455 44.6574 1.63247 41.8059C0.582755 39.9609 4.63925 35.8306 11.5096 31.2165",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M12.6182 11.7807C12.6182 8.64072 10.0847 6.08952 6.96655 6.08952C10.0847 6.08952 12.6182 3.53832 12.6182 0.398376C12.6182 3.53832 15.1517 6.08952 18.2699 6.08952C15.1517 6.08952 12.6182 8.64072 12.6182 11.7807Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M46.1002 14.781C46.1002 12.5739 44.3194 10.7807 42.1277 10.7807C44.3194 10.7807 46.1002 8.98745 46.1002 6.7804C46.1002 8.98745 47.881 10.7807 50.0728 10.7807C47.881 10.7807 46.1002 12.5739 46.1002 14.781Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M21.5997 27.752C20.4929 29.9107 16.441 30.0451 12.5431 28.0494C8.64513 26.0634 6.38338 22.7054 7.49019 20.5466L8.70289 18.1864L22.7258 25.5741L21.6093 27.752H21.5997Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M23.1991 24.7674C24.3666 22.4939 22.1525 19.038 18.2538 17.0483C14.3551 15.0586 10.2481 15.2886 9.08055 17.562C7.91302 19.8355 10.1271 23.2914 14.0258 25.2811C17.9246 27.2708 22.0316 27.0408 23.1991 24.7674Z",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M46.1981 41.7012C47.4728 42.7273 47.0077 45.4222 45.1566 47.7243C43.312 50.0276 40.7846 51.0626 39.5099 50.0364L38.1166 48.9128L44.9134 40.6596L46.1994 41.6948L46.1981 41.7012Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M44.3463 40.2169C43.0042 39.1349 40.4187 40.1251 38.5715 42.4284C36.7243 44.7318 36.3148 47.4762 37.657 48.5581C38.9991 49.6401 41.5846 48.65 43.4318 46.3466C45.2791 44.0432 45.6885 41.2988 44.3463 40.2169Z",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          })
        ]
      }),
      ...i
    });
  }, y3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "CommunicationDark",
      illustration: t.jsxs("svg", {
        width: i.width ?? "56",
        height: i.height ?? "52",
        viewBox: "0 0 56 52",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M40.3385 17.0491C39.2533 13.1339 36.5592 9.94906 33.0885 8.40068C32.4344 6.25822 30.5452 4.70972 28.3167 4.70972C26.0954 4.70972 24.2113 6.24827 23.5513 8.38002C23.539 8.38538 23.5268 8.39077 23.5145 8.39619C21.9918 9.06717 20.6083 10.0517 19.4432 11.2934C18.2782 12.5351 17.3544 14.0096 16.7248 15.6323C16.0952 17.2551 15.7722 18.9943 15.7742 20.7503M41.6526 29.4416C42.0265 30.9184 42.481 31.997 42.8973 32.7641C43.126 33.1698 43.248 33.6336 43.2508 34.1069C43.2536 34.5801 43.1369 35.0455 42.913 35.4542C42.6935 35.8629 42.376 36.202 41.9931 36.4369C41.6102 36.6718 41.1756 36.7939 40.7338 36.7909H15.8997C15.4579 36.7939 15.0232 36.6718 14.6403 36.4369C14.2574 36.202 13.9399 35.8629 13.7204 35.4542C13.4965 35.0455 13.3799 34.5801 13.3826 34.1069C13.3854 33.6336 13.5075 33.1698 13.7361 32.7641C14.1925 31.9231 14.6948 30.7078 15.0865 29.0038",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925"
          }),
          t.jsx("path", {
            d: "M28.3168 42.536C31.3161 42.536 33.7474 39.9639 33.7474 36.791H22.8862C22.8862 39.9639 25.3176 42.536 28.3168 42.536Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M43.7951 28.3051L43.8572 28.2581L44.0316 28.4887C44.1243 28.6112 44.2618 28.6919 44.4139 28.7131C44.566 28.7342 44.7203 28.6941 44.8429 28.6015L45.3054 28.2518L47.4008 31.0242C47.4466 31.0848 47.504 31.1359 47.5696 31.1744C47.6352 31.2129 47.7077 31.2381 47.783 31.2486C47.8583 31.2591 47.935 31.2546 48.0086 31.2354C48.0822 31.2163 48.1513 31.1828 48.212 31.1369L50.0599 29.74C50.1412 29.6784 50.2049 29.5964 50.2445 29.5023C50.284 29.4082 50.298 29.3053 50.2851 29.2041L49.7313 24.9059L51.4783 23.5856C52.7286 22.6423 53.7686 21.4488 54.5319 20.0811C55.2952 18.7135 55.765 17.2017 55.9114 15.6423C55.925 15.4982 55.8841 15.3541 55.7968 15.2386C55.7095 15.1231 55.582 15.0445 55.4396 15.0183C53.8993 14.737 52.3174 14.7783 50.7939 15.1395C49.2703 15.5008 47.8383 16.1741 46.5882 17.117L44.8413 18.4376L40.857 16.7328C40.7632 16.6926 40.6603 16.6779 40.559 16.6903C40.4577 16.7027 40.3614 16.7417 40.28 16.8033L38.4325 18.2005C38.3718 18.2463 38.3207 18.3037 38.2822 18.3693C38.2437 18.4348 38.2185 18.5074 38.208 18.5827C38.1975 18.658 38.202 18.7347 38.2212 18.8083C38.2404 18.8819 38.2738 18.951 38.3197 19.0116L40.4156 21.7836L39.9531 22.1333C39.8306 22.2259 39.7499 22.3634 39.7287 22.5155C39.7076 22.6677 39.7478 22.822 39.8404 22.9445L40.015 23.1755L39.9524 23.2227C38.9572 23.971 38.1202 24.9091 37.4899 25.983C36.8596 27.0568 36.4485 28.2449 36.2803 29.4787C36.2592 29.6308 36.2993 29.7852 36.392 29.9077C36.4846 30.0302 36.6221 30.1109 36.7743 30.1321C38.0072 30.3067 39.2625 30.2352 40.4676 29.9216C41.6727 29.608 42.8037 29.0586 43.7951 28.3051ZM49.0931 29.0186L47.9752 29.8637L46.2291 27.5533L48.6669 25.7104L49.0931 29.0186ZM39.5927 18.775L40.7108 17.9301L43.7774 19.2423L41.3396 21.0851L39.5927 18.775ZM47.2867 18.0409C49.4041 16.4444 52.0614 15.7383 54.692 16.0732C54.297 18.6955 52.8931 21.0596 50.7796 22.6613L44.6061 27.3282L43.2089 25.4799L45.5193 23.734C45.6419 23.6413 45.7226 23.5038 45.7438 23.3516C45.7649 23.1994 45.7247 23.0451 45.6321 22.9225C45.5394 22.7999 45.4019 22.7192 45.2497 22.698C45.0975 22.6769 44.9431 22.7171 44.8206 22.8097L42.5104 24.5562L41.1132 22.708L47.2867 18.0409ZM40.6506 24.1473L40.7135 24.0998L41.5865 25.2547L41.1249 25.6037C41.0053 25.6974 40.9274 25.8343 40.9078 25.9849C40.8882 26.1355 40.9285 26.2877 41.0201 26.4089C41.1117 26.53 41.2472 26.6104 41.3974 26.6326C41.5477 26.6548 41.7006 26.6171 41.8233 26.5276L42.285 26.1787L43.1582 27.3338L43.0958 27.3812C41.5034 28.5915 39.5262 29.1833 37.5307 29.0467C37.9434 27.0897 39.0517 25.349 40.6506 24.1473Z",
            fill: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M52.101 18.0329C51.823 17.6653 51.4105 17.4231 50.9541 17.3596C50.4976 17.296 50.0346 17.4163 49.6669 17.694C49.4812 17.8302 49.3243 18.0025 49.2056 18.1999C49.0869 18.3972 49.0086 18.6162 48.9753 18.844C48.9419 19.0719 48.9542 19.3041 49.0114 19.5272C49.0686 19.7502 49.1696 19.9597 49.3084 20.1434C49.4473 20.3271 49.6213 20.4814 49.8203 20.5972C50.0194 20.7131 50.2394 20.7882 50.4677 20.8183C50.6961 20.8483 50.9281 20.8327 51.1503 20.7723C51.3725 20.7119 51.5805 20.6079 51.7622 20.4664C52.1204 20.1819 52.3555 19.7705 52.4185 19.3174C52.4816 18.8643 52.3679 18.4044 52.101 18.0329ZM50.2525 19.4297C50.1632 19.3061 50.125 19.1528 50.146 19.0018C50.167 18.8507 50.2455 18.7136 50.3652 18.6191L50.3653 18.6185C50.4566 18.5494 50.5665 18.5089 50.6808 18.5023C50.7952 18.4956 50.909 18.5229 51.0078 18.5809C51.1066 18.6389 51.186 18.7249 51.2359 18.828C51.2858 18.9311 51.3041 19.0467 51.2883 19.1602C51.2725 19.2736 51.2234 19.3799 51.1473 19.4655C51.0711 19.551 50.9713 19.6121 50.8604 19.641C50.7496 19.6698 50.6326 19.6651 50.5244 19.6275C50.4162 19.5899 50.3216 19.5211 50.2525 19.4297Z",
            fill: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M34.6488 31.0931C18.2675 40.7444 3.25455 44.259 1.63247 41.4075C0.582755 39.5625 4.63925 35.4323 11.5096 30.8181",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M12.6182 11.3823C12.6182 8.24234 10.0847 5.69114 6.96655 5.69114C10.0847 5.69114 12.6182 3.13994 12.6182 0C12.6182 3.13994 15.1517 5.69114 18.2699 5.69114C15.1517 5.69114 12.6182 8.24234 12.6182 11.3823Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M46.1002 14.3826C46.1002 12.1755 44.3194 10.3823 42.1277 10.3823C44.3194 10.3823 46.1002 8.58907 46.1002 6.38202C46.1002 8.58907 47.881 10.3823 50.0728 10.3823C47.881 10.3823 46.1002 12.1755 46.1002 14.3826Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M21.5997 27.3536C20.4929 29.5124 16.441 29.6467 12.5431 27.651C8.64513 25.665 6.38338 22.307 7.49019 20.1482L8.70289 17.788L22.7258 25.1757L21.6093 27.3536H21.5997Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M23.1991 24.369C24.3666 22.0956 22.1525 18.6396 18.2538 16.6499C14.3551 14.6602 10.2481 14.8902 9.08055 17.1637C7.91302 19.4371 10.1271 22.8931 14.0258 24.8828C17.9246 26.8724 22.0316 26.6424 23.1991 24.369Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M46.1982 41.3027C47.4729 42.3289 47.0078 45.0238 45.1568 47.3258C43.3121 49.6292 40.7847 50.6642 39.5101 49.638L38.1168 48.5143L44.9135 40.2612L46.1995 41.2964L46.1982 41.3027Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M44.3463 39.8184C43.0042 38.7365 40.4187 39.7266 38.5715 42.03C36.7243 44.3334 36.3148 47.0777 37.657 48.1597C38.9991 49.2417 41.5846 48.2515 43.4318 45.9481C45.2791 43.6448 45.6885 40.9004 44.3463 39.8184Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          })
        ]
      }),
      ...i
    });
  }, E3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "EarnOnPush",
      illustration: t.jsxs("svg", {
        width: (i == null ? void 0 : i.width) ?? "199",
        height: (i == null ? void 0 : i.height) ?? "132",
        viewBox: "0 0 199 132",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M127.903 86.0878L127.865 99.3266C127.865 99.744 127.59 100.161 127.047 100.48L127.085 87.2412C127.628 86.9226 127.903 86.5052 127.903 86.0878Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M74.7273 115.611L74.6926 128.853L25.9971 100.483L26.035 87.2444L74.7273 115.611Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M25.1665 99.3106L25.2044 86.0718C25.2044 86.4955 25.4791 86.9193 26.0349 87.2443L25.997 100.483C25.4412 100.161 25.1634 99.7344 25.1665 99.3106Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M78.7088 115.611L78.6709 128.85C77.5752 129.494 75.7944 129.494 74.6924 128.85L74.7303 115.611C75.8323 116.255 77.6131 116.252 78.7088 115.611Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.085 87.2411L127.048 100.483L78.6709 128.85L78.7088 115.611L127.085 87.2411Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M78.0015 56.7712L77.9636 70.01C77.5152 69.7487 76.9342 69.6213 76.3501 69.6213C75.7659 69.6213 75.185 69.7519 74.7397 70.01L74.7776 56.7712C75.2228 56.5131 75.8038 56.3824 76.388 56.3824C76.9721 56.3824 77.5531 56.5131 78.0015 56.7712Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M126.694 85.1383L126.656 98.3771L77.9639 70.0101L78.0018 56.7712L126.694 85.1383Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M74.7809 56.7679L74.7431 70.0099L26.3633 98.377L26.4012 85.1382L74.7809 56.7679Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.367 86.0781L127.329 99.3169C127.329 98.976 127.105 98.6351 126.656 98.377L126.694 85.1382C127.143 85.3995 127.364 85.7372 127.367 86.0781Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M26.401 85.1382L26.3631 98.377C25.921 98.6383 25.7 98.9792 25.7032 99.3201L25.741 86.0813C25.741 85.7404 25.9589 85.3995 26.401 85.1382Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M25.7031 99.3201L25.741 86.0813C25.7284 90.4942 25.7158 94.9072 25.7031 99.3201Z",
            fill: "#EDCDFF"
          }),
          t.jsx("path", {
            d: "M127.332 99.3201C127.332 99.661 127.114 100.002 126.668 100.26L126.706 87.0212C127.152 86.76 127.369 86.4222 127.369 86.0813L127.35 92.6991C127.344 94.6873 127.328 97.3351 127.332 99.3233V99.3201Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M75.1062 115.391L75.0684 128.63L26.376 100.263L26.4139 87.0212L75.1062 115.391Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M71.3172 113.406V126.445L69.4795 125.377V112.444L71.3172 113.406Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M26.3757 100.263C25.9273 100.002 25.7063 99.6643 25.7031 99.3234C25.7158 94.9105 25.7284 90.4975 25.741 86.0846C25.741 86.4255 25.9652 86.7664 26.4136 87.0245C26.4009 90.9978 26.3883 96.2933 26.3757 100.263Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M78.3269 115.391C78.3175 119.362 78.3017 124.66 78.289 128.63C77.847 128.892 77.266 129.019 76.6819 129.019C76.0977 129.019 75.5136 128.892 75.0684 128.63C75.0778 124.217 75.0936 119.804 75.1031 115.391C75.5515 115.653 76.1324 115.78 76.7166 115.78C77.3007 115.78 77.8817 115.65 78.3238 115.391H78.3269Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M126.706 87.0212L126.669 100.26L78.292 128.63L78.3267 115.391L126.706 87.0212Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M126.694 85.1382C127.142 85.3995 127.363 85.7373 127.367 86.0782C127.367 86.4191 127.149 86.76 126.703 87.0181L78.3268 115.388C77.8816 115.65 77.3038 115.777 76.7196 115.777C76.1355 115.777 75.5513 115.65 75.1061 115.388L26.4138 87.0213C25.9654 86.76 25.7444 86.4191 25.7412 86.0782C25.7412 85.7373 25.9591 85.3963 26.4011 85.1351L74.7777 56.768C75.223 56.5099 75.8039 56.3793 76.3881 56.3793C76.9722 56.3793 77.5532 56.5099 78.0016 56.768L126.694 85.1382Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M121.68 85.2337C122.081 85.4695 122.283 85.7722 122.286 86.0813C122.286 86.3872 122.09 86.693 121.689 86.9288L78.1499 112.46C77.7489 112.696 77.2279 112.811 76.7037 112.811C76.1796 112.811 75.6523 112.696 75.2512 112.46L31.4278 86.9288C31.0268 86.693 30.8247 86.3872 30.8247 86.0813C30.8247 85.7754 31.0205 85.4695 31.4183 85.2337L74.9576 59.6992C75.3586 59.4666 75.8796 59.3488 76.4069 59.3488C76.9311 59.3488 77.4552 59.4666 77.8562 59.6992L121.68 85.2306V85.2337Z",
            stroke: "white",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M127.073 84.9184C128.175 85.562 128.181 86.6008 127.086 87.2444L78.7091 115.615C77.6134 116.258 75.8326 116.258 74.7306 115.615L26.035 87.2444C24.9331 86.6008 24.9267 85.5589 26.0224 84.9184L74.399 56.5482C75.4947 55.9046 77.2755 55.9077 78.3775 56.5482L127.07 84.9184H127.073ZM78.327 115.392L126.704 87.0213C127.149 86.7601 127.367 86.4223 127.367 86.0814C127.367 85.7405 127.143 85.3995 126.694 85.1415L78.0018 56.7712C77.5534 56.5099 76.9724 56.3825 76.3883 56.3825C75.8041 56.3825 75.2231 56.5131 74.7779 56.7712L26.4013 85.1383C25.9593 85.3995 25.7382 85.7405 25.7414 86.0814C25.7414 86.4223 25.9656 86.7633 26.4139 87.0245L75.1063 115.395C75.5547 115.656 76.1357 115.784 76.7198 115.784C77.304 115.784 77.8818 115.653 78.327 115.395",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.903 70.1152L127.865 83.354C127.865 83.7714 127.59 84.1888 127.047 84.5075L127.085 71.2687C127.628 70.95 127.903 70.5326 127.903 70.1152Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M74.7273 99.642L74.6926 112.881L25.9971 84.5137L26.035 71.2717L74.7273 99.642Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M25.1665 83.3411L25.2044 70.1023C25.2044 70.5261 25.4791 70.9498 26.0349 71.2748L25.997 84.5136C25.4412 84.1918 25.1634 83.7649 25.1665 83.3411Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M78.7088 99.6388L78.6709 112.878C77.5752 113.521 75.7944 113.521 74.6924 112.878L74.7303 99.6388C75.8323 100.282 77.6131 100.279 78.7088 99.6388Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.085 71.2717L127.048 84.5105L78.6709 112.881L78.7088 99.6388L127.085 71.2717Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M78.0015 40.7985L77.9636 54.0373C77.5152 53.7761 76.9342 53.6486 76.3501 53.6486C75.7659 53.6486 75.185 53.7792 74.7397 54.0373L74.7776 40.7985C75.2228 40.5404 75.8038 40.4098 76.388 40.4098C76.9721 40.4098 77.5531 40.5404 78.0015 40.7985Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M126.694 69.1688L126.656 82.4077L77.9639 54.0374L78.0018 40.7986L126.694 69.1688Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M74.7809 40.7986L74.7431 54.0374L26.3633 82.4077L26.4012 69.1657L74.7809 40.7986Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.367 70.1088L127.329 83.3476C127.329 83.0067 127.105 82.6657 126.656 82.4076L126.694 69.1688C127.143 69.4301 127.364 69.7678 127.367 70.1088Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M26.401 69.1656L26.3631 82.4045C25.921 82.6657 25.7 83.0067 25.7032 83.3476L25.741 70.1088C25.741 69.7678 25.9589 69.4269 26.401 69.1656Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M25.7031 83.3508L25.741 70.1119C25.7284 74.5249 25.7158 78.9378 25.7031 83.3508Z",
            fill: "#EDCDFF"
          }),
          t.jsx("path", {
            d: "M127.332 83.3476C127.332 83.6885 127.114 84.0294 126.668 84.2875L126.706 71.0487C127.152 70.7874 127.369 70.4497 127.369 70.1088L127.35 76.7266C127.344 78.7148 127.328 81.3626 127.332 83.3508V83.3476Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M75.1062 99.419L75.0715 112.658L71.6298 110.654V97.6124L69.7921 96.6533V109.583L26.376 84.2907L26.4139 71.0519L75.1062 99.419Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M71.6297 97.6124V110.654L69.792 109.583V96.6533L71.6297 97.6124Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M26.3757 84.2907C25.9273 84.0294 25.7063 83.6917 25.7031 83.3508C25.7158 78.9378 25.7284 74.5249 25.741 70.1119C25.741 70.4529 25.9652 70.7938 26.4136 71.0519C26.4009 75.0251 26.3883 80.3206 26.3757 84.2907Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M78.3269 99.4189C78.3175 103.389 78.3017 108.688 78.289 112.658C77.847 112.919 77.266 113.046 76.6819 113.046C76.0977 113.046 75.5136 112.919 75.0684 112.658C75.0778 108.245 75.0936 103.832 75.1031 99.4189C75.5515 99.6802 76.1324 99.8077 76.7166 99.8077C77.3007 99.8077 77.8817 99.677 78.3238 99.4189H78.3269Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M126.706 71.0487L126.669 84.2907L78.292 112.658L78.3267 99.419L126.706 71.0487Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M126.694 69.1688C127.142 69.43 127.363 69.7678 127.367 70.1087C127.367 70.4496 127.149 70.7906 126.703 71.0486L78.3268 99.4189C77.8816 99.6802 77.3038 99.8076 76.7196 99.8076C76.1355 99.8076 75.5513 99.6802 75.1061 99.4189L26.4138 71.0518C25.9654 70.7906 25.7444 70.4496 25.7412 70.1087C25.7412 69.7678 25.9591 69.4269 26.4011 69.1656L74.7777 40.7985C75.223 40.5404 75.8039 40.4098 76.3881 40.4098C76.9722 40.4098 77.5532 40.5404 78.0016 40.7985L126.694 69.1688Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M122.416 70.0068C122.416 70.3159 122.217 70.6218 121.819 70.8543L121.203 71.2144L78.1121 46.11C77.7111 45.8742 77.187 45.7595 76.6628 45.7595C76.1387 45.7595 75.6145 45.8774 75.2135 46.11L32.2837 71.2845L31.5543 70.8607C31.1533 70.6249 30.9543 70.3191 30.9512 70.0132C30.9512 69.7041 31.1469 69.3982 31.5479 69.1625L75.0841 43.628C75.4851 43.3954 76.0061 43.2775 76.5334 43.2775C77.0607 43.2775 77.5817 43.3954 77.9858 43.628L121.809 69.1593C122.21 69.3919 122.412 69.6977 122.416 70.0036V70.0068Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M121.203 71.2145L78.2795 96.3858C77.8785 96.6215 77.3607 96.7362 76.8334 96.7362C76.3061 96.7362 75.7819 96.6184 75.3809 96.3858L32.2837 71.2846L75.2136 46.1101C75.6146 45.8743 76.1356 45.7596 76.6629 45.7596C77.1902 45.7596 77.708 45.8775 78.1122 46.1101L121.203 71.2145Z",
            fill: "url(#paint0_linear_1868_1667)"
          }),
          t.jsx("path", {
            d: "M122.416 70.0068C122.416 70.3159 122.217 70.6218 121.819 70.8543L121.203 71.2144L78.1121 46.11C77.7111 45.8742 77.187 45.7595 76.6628 45.7595C76.1387 45.7595 75.6145 45.8774 75.2135 46.11L32.2837 71.2845L31.5543 70.8607C31.1533 70.6249 30.9543 70.3191 30.9512 70.0132C30.9512 69.7041 31.1469 69.3982 31.5479 69.1625L75.0841 43.628C75.4851 43.3954 76.0061 43.2775 76.5334 43.2775C77.0607 43.2775 77.5817 43.3954 77.9858 43.628L121.809 69.1593C122.21 69.3919 122.412 69.6977 122.416 70.0036V70.0068Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M121.203 71.2145L78.2795 96.3858C77.8785 96.6215 77.3607 96.7363 76.8334 96.7363C76.3061 96.7363 75.7819 96.6184 75.3809 96.3858L32.2837 71.2846L75.2136 46.1101C75.6146 45.8743 76.1356 45.7596 76.6629 45.7596C77.1902 45.7596 77.708 45.8775 78.1122 46.1101L121.203 71.2145Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M127.073 68.9458C128.175 69.5894 128.181 70.6281 127.086 71.2717L78.7091 99.642C77.6134 100.286 75.8326 100.286 74.7306 99.642L26.035 71.2717C24.9331 70.6281 24.9267 69.5862 26.0224 68.9458L74.399 40.5755C75.4947 39.9319 77.2755 39.9351 78.3775 40.5755L127.07 68.9458H127.073ZM78.327 99.4189L126.704 71.0487C127.149 70.7874 127.367 70.4497 127.367 70.1087C127.367 69.7678 127.143 69.4269 126.694 69.1688L78.0018 40.7986C77.5534 40.5373 76.9724 40.4098 76.3883 40.4098C75.8041 40.4098 75.2231 40.5405 74.7779 40.7986L26.4013 69.1656C25.9593 69.4269 25.7382 69.7678 25.7414 70.1087C25.7414 70.4497 25.9656 70.7906 26.4139 71.0519L75.1063 99.4221C75.5547 99.6834 76.1357 99.8108 76.7198 99.8108C77.304 99.8108 77.8818 99.6802 78.327 99.4221",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.59 115.933C197.548 120.731 190.188 124.559 181.154 124.473C172.124 124.388 164.838 120.433 164.88 115.631L164.922 111.238L167.168 111.26C170.03 108.716 175.303 107.034 181.316 107.091C187.333 107.148 192.578 108.923 195.391 111.523L197.632 111.544L197.594 115.933H197.59Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.621 111.535C197.664 106.736 190.377 102.779 181.345 102.696C172.312 102.613 164.955 106.436 164.912 111.235C164.869 116.034 172.156 119.991 181.188 120.074C190.221 120.157 197.578 116.334 197.621 111.535Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.632 111.544C197.59 116.342 190.23 120.166 181.2 120.081C172.166 119.999 164.884 116.04 164.926 111.238C164.968 106.44 172.328 102.617 181.359 102.702C190.393 102.784 197.678 106.743 197.632 111.544Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M186.335 124.079L186.223 117.125L178.405 117.787L178.214 124.335L182.317 124.463L186.335 124.079Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M188.091 117.342L188.225 123.684C188.225 123.684 191.337 122.666 192 122.4L195.546 120.198L196.871 118.452L197.611 116.641L197.625 112.604L188.091 117.342Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.621 111.535C197.664 106.736 190.377 102.779 181.345 102.696C172.312 102.613 164.955 106.436 164.912 111.235C164.869 116.034 172.156 119.991 181.188 120.074C190.221 120.157 197.578 116.334 197.621 111.535Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M194.35 111.505C194.385 107.665 188.555 104.498 181.329 104.432C174.103 104.366 168.218 107.425 168.183 111.265C168.149 115.105 173.978 118.272 181.204 118.338C188.43 118.405 194.316 115.345 194.35 111.505Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.59 115.933C197.548 120.732 190.188 124.559 181.154 124.473C172.124 124.388 164.838 120.433 164.88 115.631L164.922 111.238C164.88 116.037 172.166 119.999 181.196 120.081C190.23 120.162 197.59 116.342 197.629 111.544L197.59 115.933Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.591 110.598C197.548 115.396 190.189 119.223 181.154 119.138C172.124 119.053 164.838 115.098 164.881 110.296L164.923 105.903L167.168 105.925C170.03 103.381 175.303 101.699 181.317 101.756C187.333 101.813 192.578 103.588 195.391 106.188L197.633 106.209L197.594 110.598H197.591Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.621 106.201C197.664 101.402 190.377 97.4448 181.345 97.3621C172.313 97.2793 164.956 101.102 164.913 105.901C164.869 110.7 172.157 114.657 181.189 114.74C190.221 114.823 197.578 111 197.621 106.201Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.632 106.209C197.59 111.007 190.23 114.831 181.2 114.745C172.166 114.663 164.884 110.705 164.926 105.903C164.968 101.105 172.328 97.2813 181.359 97.3666C190.393 97.4484 197.678 101.407 197.632 106.209Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M186.335 118.743L186.223 111.79L178.405 112.451L178.214 118.999L182.317 119.127L186.335 118.743Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M188.091 112.007L188.225 118.348C188.225 118.348 191.337 117.331 192 117.064L195.546 114.863L196.871 113.116L197.611 111.306L197.625 107.269L188.091 112.007Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.621 106.201C197.664 101.402 190.377 97.4448 181.345 97.3621C172.313 97.2793 164.956 101.102 164.913 105.901C164.869 110.7 172.157 114.657 181.189 114.74C190.221 114.823 197.578 111 197.621 106.201Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M194.351 106.171C194.385 102.331 188.555 99.1639 181.33 99.0977C174.104 99.0316 168.218 102.091 168.184 105.931C168.149 109.771 173.979 112.938 181.205 113.004C188.43 113.071 194.316 110.011 194.351 106.171Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.591 110.598C197.548 115.396 190.189 119.223 181.154 119.138C172.124 119.053 164.838 115.098 164.881 110.296L164.923 105.903C164.881 110.701 172.166 114.664 181.197 114.745C190.231 114.827 197.591 111.007 197.629 106.209L197.591 110.598Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.59 105.263C197.548 110.061 190.188 113.888 181.154 113.803C172.124 113.717 164.838 109.762 164.88 104.961L164.922 100.568L167.168 100.589C170.03 98.0461 175.303 96.3637 181.316 96.4206C187.333 96.4775 192.578 98.2524 195.391 100.852L197.632 100.874L197.594 105.263H197.59Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.621 100.867C197.664 96.0683 190.377 92.111 181.345 92.0283C172.313 91.9456 164.956 95.7687 164.913 100.568C164.869 105.366 172.157 109.324 181.189 109.406C190.221 109.489 197.578 105.666 197.621 100.867Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.632 100.874C197.59 105.672 190.23 109.495 181.2 109.41C172.166 109.328 164.884 105.369 164.926 100.568C164.968 95.7695 172.328 91.9459 181.359 92.0313C190.393 92.1131 197.678 96.0719 197.632 100.874Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M186.335 113.408L186.223 106.454L178.405 107.116L178.214 113.664L182.317 113.792L186.335 113.408Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M188.091 106.671L188.225 113.013C188.225 113.013 191.337 111.996 192 111.729L195.546 109.527L196.871 107.781L197.611 105.971L197.625 101.934L188.091 106.671Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.621 100.867C197.664 96.0683 190.377 92.111 181.345 92.0283C172.313 91.9456 164.956 95.7687 164.913 100.568C164.869 105.366 172.157 109.324 181.189 109.406C190.221 109.489 197.578 105.666 197.621 100.867Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M194.351 100.837C194.385 96.9969 188.555 93.8302 181.33 93.764C174.104 93.6978 168.218 96.7573 168.184 100.597C168.149 104.438 173.979 107.604 181.205 107.671C188.43 107.737 194.316 104.677 194.351 100.837Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.59 105.263C197.548 110.061 190.188 113.888 181.154 113.803C172.124 113.717 164.838 109.762 164.88 104.961L164.922 100.568C164.88 105.366 172.166 109.328 181.196 109.41C190.23 109.492 197.59 105.672 197.629 100.874L197.59 105.263Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.591 99.9276C197.548 104.726 190.189 108.553 181.154 108.468C172.124 108.382 164.838 104.427 164.881 99.6253L164.923 95.2326L167.168 95.254C170.03 92.7109 175.303 91.0285 181.317 91.0854C187.333 91.1423 192.578 92.9172 195.391 95.5172L197.633 95.5385L197.594 99.9276H197.591Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.622 95.5297C197.665 90.7309 190.378 86.7736 181.346 86.6909C172.313 86.6082 164.956 90.4313 164.913 95.2301C164.87 100.029 172.157 103.986 181.189 104.069C190.222 104.152 197.579 100.328 197.622 95.5297Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.632 95.5385C197.59 100.337 190.23 104.16 181.2 104.075C172.166 103.993 164.884 100.034 164.926 95.2326C164.968 90.4344 172.328 86.6109 181.359 86.6962C190.393 86.778 197.678 90.7368 197.632 95.5385Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M186.336 108.073L186.223 101.119L178.405 101.781L178.215 108.329L182.318 108.457L186.336 108.073Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M188.091 101.336L188.225 107.678C188.225 107.678 191.338 106.661 192 106.394L195.546 104.192L196.872 102.446L197.612 100.636L197.626 96.5985L188.091 101.336Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.622 95.5297C197.665 90.7309 190.378 86.7736 181.346 86.6909C172.313 86.6082 164.956 90.4313 164.913 95.2301C164.87 100.029 172.157 103.986 181.189 104.069C190.222 104.152 197.579 100.328 197.622 95.5297Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M194.351 95.4997C194.386 91.6595 188.556 88.4928 181.33 88.4266C174.104 88.3604 168.219 91.4199 168.184 95.2601C168.15 99.1003 173.979 102.267 181.205 102.333C188.431 102.399 194.317 99.3399 194.351 95.4997Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.591 99.9277C197.548 104.726 190.189 108.553 181.154 108.468C172.124 108.382 164.838 104.427 164.881 99.6253L164.923 95.2327C164.881 100.031 172.166 103.993 181.197 104.075C190.231 104.157 197.591 100.337 197.629 95.5386L197.591 99.9277Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.59 94.5923C197.548 99.3905 190.188 103.218 181.154 103.132C172.124 103.047 164.838 99.0917 164.88 94.29L164.922 89.8973L167.168 89.9187C170.03 87.3755 175.303 85.6931 181.316 85.7501C187.333 85.807 192.578 87.5818 195.391 90.1819L197.632 90.2032L197.594 94.5923H197.59Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.622 90.1957C197.665 85.3969 190.378 81.4397 181.346 81.3569C172.313 81.2742 164.956 85.0973 164.913 89.8961C164.87 94.6949 172.157 98.6521 181.189 98.7349C190.222 98.8176 197.579 94.9945 197.622 90.1957Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.632 90.2033C197.59 95.0014 190.23 98.825 181.2 98.7397C172.166 98.6578 164.884 94.6991 164.926 89.8974C164.968 85.0992 172.328 81.2757 181.359 81.361C190.393 81.4428 197.678 85.4016 197.632 90.2033Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M186.335 102.737L186.223 95.7838L178.405 96.4454L178.214 102.993L182.317 103.122L186.335 102.737Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M188.091 96.0009L188.225 102.343C188.225 102.343 191.337 101.325 192 101.059L195.546 98.857L196.871 97.1106L197.611 95.3002L197.625 91.2632L188.091 96.0009Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M197.622 90.1957C197.665 85.3969 190.378 81.4397 181.346 81.3569C172.313 81.2742 164.956 85.0973 164.913 89.8961C164.87 94.6949 172.157 98.6521 181.189 98.7349C190.222 98.8176 197.579 94.9945 197.622 90.1957Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M194.351 90.1659C194.386 86.3257 188.556 83.1589 181.33 83.0927C174.104 83.0266 168.219 86.086 168.184 89.9262C168.15 93.7664 173.979 96.9332 181.205 96.9993C188.431 97.0655 194.317 94.0061 194.351 90.1659Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M197.59 94.5923C197.548 99.3905 190.188 103.218 181.154 103.132C172.124 103.047 164.838 99.0917 164.88 94.29L164.922 89.8973C164.88 94.6955 172.166 98.6578 181.196 98.7396C190.23 98.8214 197.59 95.0014 197.629 90.2032L197.59 94.5923Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            opacity: "0.39",
            d: "M160.74 126.461C168.126 124.056 173.197 119.24 172.067 115.703C170.936 112.166 164.031 111.247 156.645 113.652C149.258 116.057 144.187 120.873 145.318 124.41C146.448 127.948 153.353 128.866 160.74 126.461Z",
            fill: "#2F3137",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M195.268 88.0941C195.225 92.8923 187.866 96.7194 178.832 96.6341C169.801 96.5487 162.516 92.5935 162.558 87.7918L162.6 83.3991L164.845 83.4205C167.708 80.8774 172.981 79.195 178.994 79.2519C185.011 79.3088 190.256 81.0836 193.068 83.6837L195.31 83.705L195.271 88.0941H195.268Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M195.299 83.6989C195.343 78.9001 188.056 74.9428 179.023 74.8601C169.991 74.7774 162.634 78.6005 162.591 83.3993C162.548 88.1981 169.835 92.1553 178.867 92.238C187.899 92.3208 195.256 88.4976 195.299 83.6989Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M195.31 83.7051C195.267 88.5033 187.908 92.3268 178.877 92.2415C169.843 92.1597 162.561 88.2009 162.603 83.3992C162.646 78.6011 170.005 74.7775 179.036 74.8629C188.07 74.9447 195.356 78.9034 195.31 83.7051Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M184.013 96.2391L183.9 89.2855L176.082 89.9471L175.892 96.4952L179.995 96.6268L184.013 96.2391Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M185.765 89.5027L185.899 95.8445C185.899 95.8445 189.011 94.8273 189.674 94.5605L193.22 92.3588L194.545 90.6124L195.285 88.802L195.299 84.765L185.765 89.5027Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M195.299 83.6989C195.343 78.9001 188.056 74.9428 179.023 74.8601C169.991 74.7774 162.634 78.6005 162.591 83.3993C162.548 88.1981 169.835 92.1553 178.867 92.238C187.899 92.3208 195.256 88.4976 195.299 83.6989Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M192.029 83.6689C192.063 79.8287 186.234 76.662 179.008 76.5958C171.782 76.5296 165.896 79.5891 165.862 83.4293C165.827 87.2695 171.657 90.4362 178.883 90.5024C186.109 90.5686 191.994 87.5091 192.029 83.6689Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M195.268 88.0941C195.225 92.8922 187.866 96.7193 178.832 96.634C169.801 96.5486 162.516 92.5934 162.558 87.7917L162.6 83.399C162.558 88.1972 169.844 92.1595 178.874 92.2413C187.908 92.3231 195.268 88.5031 195.307 83.7049L195.268 88.0941Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M174.986 86.9914C175.141 87.0803 175.089 87.2333 174.884 87.2795C174.056 87.4645 173.083 87.3649 172.413 86.9736C171.744 86.5824 171.567 86.0133 171.881 85.5295C171.959 85.4086 172.219 85.3802 172.371 85.4691L174.983 86.9914H174.986Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M185.191 82.2432L185.226 82.2681C185.635 82.638 185.832 83.0648 185.793 83.5059C185.747 83.9505 185.476 84.3666 184.993 84.7081C184.947 84.7401 184.884 84.7579 184.813 84.7614C184.743 84.765 184.676 84.7508 184.623 84.7259C184.616 84.7259 184.609 84.7188 184.602 84.7152C184.507 84.6583 184.5 84.5729 184.588 84.5125C185.416 83.9256 185.501 83.072 184.792 82.4353C184.711 82.3641 184.746 82.2717 184.866 82.2219C184.968 82.1827 185.109 82.1934 185.194 82.2432H185.191Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M186.586 81.6669L186.621 81.6918C187.224 82.236 187.513 82.8655 187.453 83.5164C187.393 84.1709 186.988 84.7827 186.276 85.2877C186.233 85.3162 186.17 85.3375 186.1 85.3411C186.029 85.3447 185.962 85.3304 185.909 85.3055C185.902 85.3055 185.895 85.2984 185.888 85.2949C185.793 85.2379 185.786 85.1526 185.874 85.0921C187.16 84.1816 187.291 82.8549 186.184 81.859C186.107 81.7878 186.138 81.6954 186.262 81.6491C186.367 81.61 186.505 81.6207 186.589 81.6705L186.586 81.6669Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M181.447 78.672C181.532 78.7218 181.549 78.8001 181.482 78.8641C181.405 78.9352 181.243 78.953 181.119 78.9103C179.417 78.2701 177.143 78.3484 175.596 79.1024C175.487 79.1522 175.339 79.1487 175.243 79.0917C175.236 79.0917 175.233 79.0846 175.226 79.0811C175.18 79.0491 175.159 79.0099 175.166 78.9708C175.173 78.9317 175.205 78.8926 175.261 78.8677C176.121 78.4515 177.164 78.2097 178.285 78.1741C179.396 78.1385 180.474 78.3021 181.408 78.6543L181.447 78.6756V78.672Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M180.471 79.4901C180.555 79.5399 180.573 79.6182 180.506 79.6786C180.428 79.7498 180.263 79.7711 180.146 79.7249C179.05 79.3123 177.591 79.3656 176.593 79.8493C176.488 79.9027 176.336 79.8956 176.241 79.8387C176.234 79.8387 176.23 79.8316 176.223 79.828C176.181 79.7996 176.156 79.7569 176.163 79.7177C176.17 79.6786 176.206 79.6395 176.258 79.6146C176.84 79.3301 177.549 79.1664 178.31 79.1415C179.061 79.1166 179.797 79.2305 180.428 79.4688L180.474 79.4901H180.471Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M182.61 80.9839C183.023 81.2258 183.058 81.6028 182.712 81.866C183.766 82.8904 183.544 84.2384 182.039 85.1205L181.958 85.1667L179.262 86.7495C178.839 86.9985 178.842 87.3969 179.265 87.6458C179.463 87.7597 179.466 87.9517 179.265 88.0655C179.068 88.1829 178.744 88.1829 178.543 88.0655L170.524 83.3954C170.323 83.2781 170.323 83.0896 170.524 82.9722C170.725 82.8548 171.049 82.8584 171.25 82.9722C171.676 83.2176 172.36 83.2176 172.78 82.9722L175.554 81.3467C175.614 81.3111 175.659 81.2862 175.705 81.2613L175.776 81.2258C175.804 81.2116 175.832 81.1973 175.86 81.1831C175.888 81.1689 175.92 81.1546 175.945 81.1404L176.008 81.112C177.489 80.4468 179.512 80.3864 181.098 80.9306C181.549 80.7243 182.198 80.7421 182.614 80.9839H182.61Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M166.978 101.653C170.509 104.868 168.462 112.964 162.409 119.729C156.357 126.49 148.589 129.368 145.057 126.152L141.825 123.207L143.33 121.525C143.34 117.676 145.593 112.579 149.625 108.076C153.657 103.57 158.455 100.789 162.247 100.387L163.749 98.7078L166.978 101.649V101.653Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M159.179 116.777C165.232 110.012 167.278 101.92 163.748 98.7041C160.218 95.488 152.449 98.3649 146.396 105.13C140.343 111.895 138.297 119.986 141.827 123.202C145.357 126.419 153.125 123.542 159.179 116.777Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M163.749 98.7077C167.281 101.923 165.233 110.015 159.177 116.78C153.125 123.545 145.357 126.419 141.825 123.204C138.293 119.988 140.341 111.896 146.397 105.131C152.449 98.3663 160.221 95.4888 163.749 98.7077Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M165.55 115.556L160.319 111.025L155.624 117.367L160.354 121.856L163.174 118.843L165.55 115.556Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M161.718 109.762L166.509 113.87C166.509 113.87 167.82 110.847 168.059 110.168L168.779 106.028L168.363 103.869L167.51 102.108L164.524 99.4189L161.715 109.759L161.718 109.762Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M159.179 116.777C165.232 110.012 167.278 101.92 163.748 98.7041C160.218 95.488 152.449 98.3649 146.396 105.13C140.343 111.895 138.297 119.986 141.827 123.202C145.357 126.419 153.125 123.542 159.179 116.777Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M157.902 115.613C162.745 110.201 164.38 103.727 161.556 101.154C158.731 98.5801 152.515 100.881 147.673 106.293C142.83 111.705 141.194 118.179 144.019 120.752C146.844 123.326 153.059 121.025 157.902 115.613Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M166.978 101.653C170.509 104.868 168.462 112.963 162.409 119.729C156.357 126.49 148.589 129.368 145.057 126.152L141.825 123.207C145.357 126.423 153.125 123.549 159.177 116.784C165.229 110.018 167.281 101.927 163.749 98.7113L166.978 101.653Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M152.706 116.236C152.875 116.179 152.953 116.321 152.85 116.502C152.442 117.249 151.719 117.918 150.986 118.167C150.253 118.413 149.713 118.167 149.562 117.609C149.523 117.474 149.675 117.257 149.844 117.2L152.706 116.236Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M150.781 107.12C150.877 107.088 150.944 107.13 150.947 107.223C150.947 107.329 150.856 107.465 150.739 107.525C149.71 108.076 148.776 109.215 148.476 110.289C148.445 110.399 148.342 110.513 148.24 110.545C148.233 110.545 148.226 110.548 148.219 110.552C148.166 110.566 148.12 110.555 148.096 110.523C148.071 110.491 148.064 110.445 148.078 110.385C148.254 109.755 148.603 109.111 149.09 108.521C149.572 107.934 150.14 107.457 150.739 107.134L150.781 107.116V107.12Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M150.82 105.835C150.915 105.803 150.985 105.843 150.985 105.935C150.985 106.042 150.894 106.177 150.781 106.241C149.174 107.098 147.729 108.866 147.256 110.541C147.225 110.655 147.119 110.765 147.013 110.801C147.006 110.801 147.002 110.804 146.995 110.804C146.943 110.819 146.9 110.804 146.872 110.772C146.847 110.74 146.84 110.694 146.858 110.634C147.115 109.709 147.633 108.759 148.345 107.891C149.057 107.027 149.896 106.323 150.774 105.853L150.816 105.835H150.82Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M155.952 105.38L155.994 105.37C156.537 105.302 156.985 105.441 157.288 105.764C157.591 106.088 157.714 106.572 157.647 107.166C157.64 107.219 157.612 107.28 157.57 107.337C157.527 107.393 157.471 107.436 157.415 107.461C157.408 107.461 157.404 107.465 157.397 107.468C157.291 107.504 157.221 107.45 157.235 107.344C157.351 106.33 156.773 105.704 155.829 105.814C155.723 105.825 155.677 105.74 155.723 105.615C155.762 105.508 155.86 105.412 155.952 105.384V105.38Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M156.453 103.943L156.495 103.933C157.299 103.837 157.958 104.036 158.402 104.512C158.85 104.993 159.033 105.704 158.931 106.575C158.924 106.629 158.896 106.689 158.853 106.746C158.811 106.799 158.755 106.846 158.698 106.871C158.691 106.871 158.688 106.874 158.681 106.878C158.575 106.913 158.504 106.86 158.518 106.753C158.698 105.178 157.796 104.199 156.33 104.377C156.224 104.388 156.178 104.299 156.22 104.178C156.263 104.071 156.361 103.972 156.453 103.943Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M153.309 106.494C153.763 106.341 154.063 106.568 154.031 107.002C155.49 106.888 156.34 107.952 155.994 109.673L155.977 109.766L155.36 112.853C155.265 113.337 155.561 113.6 156.03 113.444C156.248 113.369 156.389 113.493 156.343 113.721C156.298 113.949 156.083 114.194 155.864 114.265L147.077 117.221C146.858 117.296 146.717 117.171 146.763 116.943C146.809 116.716 147.027 116.474 147.249 116.396C147.711 116.239 148.162 115.72 148.261 115.24L148.896 112.067C148.91 112 148.924 111.946 148.934 111.893L148.952 111.818C148.959 111.786 148.97 111.758 148.977 111.726C148.984 111.694 148.994 111.665 149.005 111.633L149.026 111.566C149.516 110.004 150.809 108.439 152.265 107.6C152.41 107.127 152.857 106.643 153.312 106.49L153.309 106.494Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M131.885 121.872C131.843 126.67 124.483 130.497 115.449 130.412C106.419 130.326 99.1332 126.371 99.1755 121.57L99.2178 117.177L101.463 117.198C104.325 114.655 109.598 112.973 115.612 113.03C121.628 113.087 126.873 114.861 129.686 117.461L131.928 117.483L131.889 121.872H131.885Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.922 117.473C131.965 112.674 124.678 108.717 115.646 108.634C106.614 108.551 99.2566 112.374 99.2134 117.173C99.1702 121.972 106.457 125.929 115.49 126.012C124.522 126.094 131.879 122.271 131.922 117.473Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.924 117.479C131.882 122.277 124.522 126.101 115.491 126.016C106.457 125.934 99.1752 121.975 99.2175 117.173C99.2598 112.375 106.62 108.552 115.65 108.637C124.681 108.722 131.97 112.678 131.924 117.479Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M120.627 130.014L120.514 123.06L112.7 123.722L112.506 130.27L116.612 130.401L120.627 130.014Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M122.382 123.277L122.516 129.619C122.516 129.619 125.629 128.601 126.291 128.335L129.837 126.133L131.163 124.387L131.903 122.576L131.917 118.539L122.382 123.277Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M131.922 117.473C131.965 112.674 124.678 108.717 115.646 108.634C106.614 108.551 99.2566 112.374 99.2134 117.173C99.1702 121.972 106.457 125.929 115.49 126.012C124.522 126.094 131.879 122.271 131.922 117.473Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M128.651 117.443C128.686 113.603 122.856 110.436 115.63 110.37C108.405 110.303 102.519 113.363 102.484 117.203C102.45 121.043 108.28 124.21 115.505 124.276C122.731 124.342 128.617 121.283 128.651 117.443Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.885 121.872C131.843 126.67 124.483 130.497 115.449 130.412C106.419 130.326 99.1332 126.371 99.1755 121.57L99.2178 117.177C99.1755 121.975 106.461 125.937 115.492 126.019C124.526 126.101 131.885 122.281 131.924 117.483L131.885 121.872Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.885 116.537C131.843 121.335 124.483 125.162 115.449 125.077C106.418 124.991 99.1327 121.036 99.175 116.234L99.2173 111.842L101.463 111.863C104.325 109.32 109.598 107.637 115.611 107.694C121.628 107.751 126.873 109.526 129.686 112.126L131.927 112.148L131.889 116.537H131.885Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.922 112.139C131.965 107.34 124.678 103.383 115.646 103.3C106.614 103.217 99.2566 107.04 99.2134 111.839C99.1702 116.638 106.457 120.595 115.49 120.678C124.522 120.761 131.879 116.937 131.922 112.139Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.924 112.144C131.882 116.942 124.522 120.766 115.491 120.68C106.457 120.599 99.1752 116.64 99.2175 111.838C99.2598 107.04 106.62 103.216 115.65 103.302C124.681 103.387 131.97 107.342 131.924 112.144Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M120.627 124.678L120.514 117.725L112.7 118.386L112.506 124.934L116.612 125.066L120.627 124.678Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M122.382 117.942L122.516 124.283C122.516 124.283 125.629 123.266 126.291 122.999L129.837 120.798L131.163 119.051L131.903 117.241L131.917 113.204L122.382 117.942Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M131.922 112.139C131.965 107.34 124.678 103.383 115.646 103.3C106.614 103.217 99.2566 107.04 99.2134 111.839C99.1702 116.638 106.457 120.595 115.49 120.678C124.522 120.761 131.879 116.937 131.922 112.139Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M128.651 112.109C128.686 108.269 122.856 105.102 115.63 105.036C108.405 104.969 102.519 108.029 102.484 111.869C102.45 115.709 108.28 118.876 115.505 118.942C122.731 119.008 128.617 115.949 128.651 112.109Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M131.885 116.537C131.843 121.335 124.483 125.162 115.449 125.077C106.418 124.991 99.1327 121.036 99.175 116.234L99.2173 111.842C99.175 116.64 106.461 120.602 115.491 120.684C124.525 120.766 131.885 116.946 131.924 112.148L131.885 116.537Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M129.562 110.038C129.519 114.836 122.16 118.664 113.126 118.578C104.095 118.493 96.8094 114.538 96.8517 109.736L96.894 105.343L99.1393 105.365C102.001 102.821 107.275 101.139 113.288 101.196C119.305 101.253 124.549 103.028 127.362 105.628L129.604 105.649L129.565 110.038H129.562Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M129.599 105.642C129.642 100.843 122.355 96.8857 113.323 96.803C104.291 96.7203 96.9338 100.543 96.8907 105.342C96.8475 110.141 104.135 114.098 113.167 114.181C122.199 114.264 129.556 110.441 129.599 105.642Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M129.601 105.646C129.558 110.444 122.199 114.267 113.168 114.182C104.134 114.1 96.8519 110.141 96.8942 105.34C96.9365 100.542 104.296 96.718 113.327 96.8034C122.357 96.8888 129.647 100.844 129.601 105.646Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M118.304 118.184L118.191 111.226L110.373 111.888L110.183 118.436L114.285 118.568L118.304 118.184Z",
            fill: "#F3AEFF"
          }),
          t.jsx("path", {
            d: "M120.059 111.447L120.193 117.789C120.193 117.789 123.305 116.771 123.968 116.505L127.514 114.303L128.839 112.557L129.58 110.746L129.594 106.709L120.059 111.447Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M129.599 105.642C129.642 100.843 122.355 96.8857 113.323 96.803C104.291 96.7203 96.9338 100.543 96.8907 105.342C96.8475 110.141 104.135 114.098 113.167 114.181C122.199 114.264 129.556 110.441 129.599 105.642Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M126.329 105.612C126.363 101.772 120.533 98.605 113.308 98.5388C106.082 98.4726 100.196 101.532 100.162 105.372C100.127 109.212 105.957 112.379 113.183 112.445C120.408 112.512 126.294 109.452 126.329 105.612Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M129.562 110.038C129.519 114.837 122.16 118.664 113.126 118.578C104.095 118.493 96.8094 114.538 96.8517 109.736L96.894 105.343C96.8517 110.142 104.137 114.104 113.168 114.186C122.202 114.267 129.562 110.447 129.601 105.649L129.562 110.038Z",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M112.337 101.324L112.386 101.31C113.08 101.146 113.838 101.118 114.568 101.228C115.308 101.338 115.95 101.577 116.433 101.922C116.478 101.954 116.5 101.993 116.492 102.032C116.482 102.075 116.454 102.11 116.397 102.135C116.39 102.135 116.383 102.142 116.38 102.142C116.263 102.188 116.115 102.174 116.031 102.11C115.206 101.52 113.789 101.306 112.583 101.587C112.45 101.616 112.298 101.58 112.245 101.502C112.196 101.434 112.242 101.36 112.34 101.321L112.337 101.324Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M111.635 100.407L111.685 100.392C112.71 100.154 113.824 100.111 114.903 100.275C115.992 100.439 116.944 100.791 117.649 101.299C117.694 101.331 117.716 101.371 117.708 101.41C117.698 101.452 117.666 101.488 117.613 101.513C117.606 101.513 117.599 101.52 117.596 101.52C117.479 101.566 117.331 101.552 117.247 101.488C115.964 100.57 113.757 100.236 111.882 100.677C111.745 100.709 111.593 100.67 111.544 100.592C111.494 100.524 111.537 100.446 111.635 100.407Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M109.735 102.555C110.218 102.366 110.86 102.42 111.237 102.669C113.158 102.267 115.375 102.658 116.57 103.697L116.633 103.754L118.776 105.61C119.111 105.902 119.784 105.98 120.281 105.784C120.514 105.692 120.831 105.728 120.99 105.863C121.149 105.998 121.085 106.186 120.852 106.275L111.484 109.957C111.251 110.049 110.934 110.014 110.775 109.875C110.616 109.736 110.687 109.551 110.92 109.459C111.413 109.263 111.536 108.872 111.202 108.58L108.999 106.67C108.949 106.627 108.918 106.595 108.886 106.563L108.84 106.517C108.819 106.499 108.801 106.482 108.784 106.46C108.766 106.439 108.748 106.421 108.731 106.403L108.695 106.361C107.86 105.379 108.139 104.209 109.355 103.405C109.094 103.11 109.245 102.74 109.732 102.548L109.735 102.555Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M118.375 108.107C118.554 108.036 118.798 108.096 118.836 108.221C118.992 108.733 118.636 109.27 117.853 109.58C117.071 109.889 116.084 109.878 115.329 109.601C115.146 109.533 115.146 109.377 115.322 109.309L118.375 108.111V108.107Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M106.821 103.49C106.919 103.451 107.057 103.458 107.152 103.508C107.254 103.565 107.258 103.664 107.159 103.725C106.26 104.269 106.07 105.119 106.694 105.784C106.757 105.852 106.725 105.941 106.613 105.984C106.606 105.984 106.595 105.991 106.588 105.991C106.528 106.012 106.457 106.016 106.39 106.005C106.324 105.994 106.267 105.969 106.235 105.934C105.869 105.542 105.731 105.105 105.834 104.664C105.936 104.226 106.264 103.828 106.785 103.512L106.828 103.49H106.821Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M105.636 102.768C105.735 102.729 105.872 102.736 105.96 102.786C106.066 102.846 106.07 102.942 105.971 103.003C104.568 103.853 104.268 105.173 105.241 106.211C105.308 106.282 105.273 106.368 105.157 106.414C105.15 106.414 105.142 106.417 105.135 106.421C105.076 106.442 105.001 106.446 104.935 106.432C104.868 106.421 104.815 106.393 104.779 106.357C104.24 105.784 104.036 105.137 104.187 104.486C104.335 103.842 104.818 103.255 105.587 102.789L105.629 102.768H105.636Z",
            fill: "#CF59E2"
          }),
          t.jsx("path", {
            d: "M69.5466 70.1295C69.3076 70.014 69.0873 70.0513 68.9603 70.2337C68.8333 70.4162 68.8146 70.7104 68.9117 71.0232C69.9164 74.1998 72.1236 77.0114 74.5362 78.1845C76.9488 79.3575 79.1262 78.6798 80.086 76.4565C80.1793 76.2405 80.1569 75.9277 80.0262 75.6186C79.8955 75.3095 79.6714 75.0526 79.4287 74.9371L69.5466 70.1295Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M69.0614 70.1295L72.938 67.8653C73.0948 67.7871 73.2928 67.7945 73.5019 67.8988C76.0452 69.1352 78.6782 70.2598 81.1543 71.6191C81.6734 71.9021 82.1926 72.1218 82.7341 72.3601C83.2756 72.5985 83.8209 72.9299 84.0898 73.455C84.3886 74.0434 84.3662 74.844 83.9367 75.3468C83.3316 76.0581 82.0805 76.7247 80.8742 77.313C80.0825 77.7003 79.2123 77.9573 78.4242 78.352C79.1861 77.9685 79.6754 77.2758 79.9928 76.6539C80.131 76.382 80.1422 75.816 80.0227 75.6149C79.9555 75.5032 79.7351 75.0824 79.4251 74.9334L69.9203 70.3119C69.7112 70.2114 69.2145 70.0513 69.0576 70.1295H69.0614Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M61.1396 57.9482L65.0984 55.9596C65.7781 55.617 66.2076 54.7977 66.2002 53.6395L62.2414 55.6281C62.2526 56.7863 61.8194 57.6093 61.1396 57.9482Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M62.2414 55.6244L66.1965 53.6358L66.0882 40.7098L62.1294 42.6985L62.2414 55.6244Z",
            fill: "#2F3137"
          }),
          t.jsx("path", {
            d: "M54.585 30.7258L58.5437 28.7372C58.7043 28.6552 58.8164 28.4728 58.8351 28.2084C59.1152 24.1939 60.8256 21.2817 63.3839 19.9969L59.4251 21.9856C56.8669 23.2703 55.1564 26.1825 54.8763 30.197C54.8576 30.4614 54.7493 30.6438 54.585 30.7258Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M58.9062 33.5003L62.865 31.5117C62.865 31.5117 62.8688 31.5117 62.8725 31.5079C63.0368 31.4223 63.1339 31.2324 63.1563 30.9791C63.3356 28.4096 64.105 26.7114 65.7408 25.8884L62.1069 27.7132C60.4711 28.5362 59.3768 30.3982 59.1976 32.9677C59.1789 33.221 59.078 33.4109 58.9137 33.4965C58.9137 33.4965 58.91 33.4965 58.9062 33.5003Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M61.0762 25.8362C62.219 25.259 63.5635 24.9797 65.035 25.3074C65.0947 25.326 65.147 25.3447 65.1993 25.3707C65.5765 25.5532 65.9089 26.041 65.991 26.5289C66.0583 26.9348 65.8304 27.1136 65.6026 27.229L69.6735 25.3707C69.9013 25.259 70.017 24.9462 69.9498 24.5366C69.8677 24.0487 69.5353 23.5646 69.1581 23.3784C69.1058 23.3523 69.0498 23.3374 68.9937 23.3188C67.526 22.9874 66.1778 23.1214 65.035 23.6949L61.0799 25.8325L61.0762 25.8362Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M62.428 55.807C62.6521 55.6952 62.9285 55.7101 63.2198 55.8517C63.9331 56.198 64.5829 56.2129 65.0946 55.9559L61.1358 57.9445C60.6242 58.2015 59.9706 58.1866 59.261 57.8403C58.966 57.6988 58.6896 57.6839 58.4692 57.7956L62.428 55.807Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M70.5582 31.2993C71.223 30.9678 71.9476 30.7444 72.7244 30.6401L76.2761 28.8563C76.7877 28.5994 77.4338 28.6143 78.1322 28.9569C79.6112 29.6756 80.8735 31.6158 81.1723 33.6268C81.1723 33.6603 81.1797 33.6901 81.1835 33.7236C86.0087 37.5891 89.5753 44.1806 90.2737 50.5225C90.2849 50.6194 90.2961 50.7087 90.3036 50.7981C90.3186 50.9247 90.3298 51.0513 90.3372 51.1742C90.3447 51.2971 90.3559 51.42 90.3671 51.595C90.3671 51.6137 90.3671 51.6323 90.3671 51.6472C90.3671 51.6621 90.3671 51.6844 90.3671 51.703C90.3671 51.7552 90.3746 51.8036 90.3746 51.8557C90.382 52.0717 90.3932 52.351 90.397 52.5335L90.5053 65.4595C90.5053 65.5228 90.5053 65.5898 90.5128 65.6531C90.5314 65.7164 90.4866 65.9883 90.565 66.3867C90.6285 66.707 90.8078 67.1651 90.8265 67.2135C90.8339 67.2321 90.8377 67.247 90.8451 67.2656C90.9945 67.6864 91.185 68.0961 91.4128 68.4796C91.6444 68.8781 91.9207 69.2505 92.2195 69.5782C92.2606 69.6229 92.3054 69.6676 92.3465 69.7123C92.395 69.7607 92.4436 69.8091 92.4884 69.8538C92.5295 69.8873 92.5631 69.9245 92.6042 69.9581C92.8955 70.2187 93.2092 70.4347 93.5304 70.5986C93.7844 70.7252 94.0196 70.9226 94.2213 71.1646C94.2885 71.2428 94.3483 71.3285 94.4081 71.4141C94.4305 71.4514 94.4491 71.4849 94.4715 71.5221C94.4977 71.5668 94.5238 71.6115 94.5462 71.6562C94.7255 72.01 94.8338 72.3973 94.8375 72.7659C94.845 73.265 94.6583 73.615 94.3707 73.7603L90.4157 75.7489C90.7032 75.6036 90.8862 75.2536 90.8825 74.7546C90.8825 74.3859 90.7705 73.9986 90.5912 73.6485C90.565 73.6001 90.5389 73.5554 90.5165 73.5107C90.4978 73.4772 90.4754 73.44 90.453 73.4065C90.397 73.3171 90.3335 73.2314 90.27 73.1532C90.0683 72.9112 89.833 72.7101 89.5791 72.5872C89.2579 72.4233 88.9442 72.2111 88.6529 71.9467C88.6118 71.9132 88.5782 71.8796 88.5408 71.8424C88.4886 71.794 88.4437 71.7456 88.3952 71.7009C88.3541 71.6599 88.3093 71.6152 88.2682 71.5668C87.9694 71.2391 87.6968 70.8667 87.4615 70.4682C87.4615 70.4682 87.4615 70.4682 87.4615 70.4608C87.4615 70.3826 87.032 69.649 86.8938 69.2542C86.8864 69.2356 86.8789 69.2207 86.8752 69.2021C86.8378 69.0904 86.5913 67.7572 86.5614 67.6455V67.4481L86.4494 54.5221C86.4494 54.2949 86.4382 54.0417 86.4307 53.8443C86.4307 53.7587 86.4233 53.673 86.4158 53.5837C86.4046 53.4086 86.3971 53.2857 86.3859 53.1628C86.3784 53.0362 86.3672 52.9096 86.356 52.7867C86.3448 52.6973 86.3374 52.6042 86.3262 52.5111C85.9751 49.3383 84.907 46.1022 83.3197 43.1751C81.7399 40.2555 79.641 37.6412 77.2322 35.7085C77.2322 35.6787 77.2247 35.6452 77.221 35.6154C77.0716 34.6248 76.6906 33.6491 76.1678 32.8298C75.6785 32.0664 75.0623 31.4408 74.3938 31.0572C73.3257 31.5935 72.2575 32.1297 71.1894 32.666C69.464 32.3979 67.9141 32.625 66.6069 33.2842L70.5657 31.2956L70.5582 31.2993Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M64.8518 21.3265L68.8405 19.609C68.904 19.5782 68.9637 19.5337 69.0086 19.4721C69.1206 19.3216 69.1579 19.0957 69.1094 18.8426C69.0272 18.3944 68.6948 17.9496 68.3214 17.7819C68.2691 17.758 68.2131 17.7409 68.1533 17.7272C65.9984 17.2824 64.0265 17.4637 62.3421 18.237L58.5327 20.1051C60.2171 19.3284 62.0433 19.1094 64.1983 19.5508C64.258 19.5645 64.314 19.5816 64.3663 19.6055C64.7398 19.7732 65.0759 20.2214 65.1543 20.6662C65.2029 20.9194 65.0909 21.0152 64.9788 21.1657C64.934 21.2273 64.9228 21.2923 64.8556 21.3231L64.8518 21.3265Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M90.4877 48.884L94.4943 46.8848C94.5358 46.8624 94.5774 46.8362 94.6114 46.7987C94.7475 46.6602 94.8118 46.4356 94.7891 46.166C94.5774 43.5528 93.7194 40.8161 92.3095 38.2515C90.911 35.7057 89.108 33.5717 87.0858 32.0704C87.0254 32.0255 86.9687 31.9918 86.9157 31.9656C86.7268 31.8758 86.5491 31.8683 86.413 31.9394L82.4556 34.0697C82.5954 33.9985 82.7239 33.8712 82.9129 33.9611C82.9658 33.9873 83.0225 34.021 83.083 34.0659C85.1052 35.5634 86.9082 37.7012 88.3067 40.247C89.7166 42.8115 90.5708 45.5483 90.7863 48.1615C90.8089 48.431 90.7447 48.6557 90.6086 48.7942C90.5746 48.8316 90.533 48.8578 90.4914 48.8803L90.4877 48.884Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M94.6921 50.4765L98.6681 48.464C98.7093 48.4414 98.7468 48.415 98.7843 48.3773C98.9194 48.2379 98.9831 48.0117 98.9606 47.7404C98.6493 43.8774 97.4002 39.8336 95.3485 36.0422C93.3117 32.281 90.6823 29.1191 87.7378 26.9068C87.6741 26.8616 87.6216 26.8277 87.5691 26.8013C87.3815 26.7109 87.2052 26.7033 87.0702 26.7749L83.1992 28.8666C83.338 28.795 83.4093 28.7196 83.5968 28.8138C83.6493 28.8402 83.7018 28.8741 83.7656 28.9193C86.7101 31.1354 89.3395 34.2935 91.3763 38.0547C93.4243 41.8423 94.6733 45.8899 94.9884 49.7529C95.0109 50.0242 94.9471 50.2504 94.8121 50.3898C94.7783 50.4237 94.7371 50.4539 94.6958 50.4765H94.6921Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M74.1736 30.9455C72.6835 30.2193 71.4249 30.9679 71.2531 32.6809C65.7967 31.7872 62.0732 35.8798 62.133 42.6985L62.2413 55.6282C62.2599 57.6577 60.9229 58.652 59.2647 57.8477C58.9248 57.6801 58.6037 57.6875 58.3684 57.8663C58.1331 58.045 58.0061 58.369 58.0098 58.7824C58.0173 59.6389 58.5925 60.6146 59.2946 60.9535L89.6204 75.7042C90.3225 76.0431 90.8864 75.626 90.879 74.7546C90.8715 73.8981 90.2963 72.9485 89.5718 72.5872C87.9248 71.7717 86.5691 69.4665 86.5542 67.4518L86.4459 54.5259C86.4421 54.2615 86.4384 54.0566 86.4272 53.8481C86.4272 53.7624 86.4197 53.6731 86.4123 53.5874C86.401 53.4161 86.3936 53.2895 86.3861 53.1666C86.3749 53.0437 86.3637 52.9171 86.3525 52.7905C86.3413 52.6974 86.3338 52.608 86.3226 52.5112C85.6242 46.1729 82.0539 39.5777 77.2324 35.7122C76.9597 33.664 75.6787 31.6754 74.1811 30.9455H74.1736Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M65.3528 25.2698L65.3538 25.2675C65.2948 25.2407 65.2323 25.2178 65.1627 25.2005L65.1627 25.2004L65.154 25.1984C63.1076 24.7402 61.2541 25.1482 59.8294 26.4163L59.8289 26.4168C58.4051 27.6889 57.5878 29.6743 57.419 32.1L57.419 32.1L57.4188 32.1035C57.4029 32.3671 57.4713 32.6494 57.601 32.9035L57.6009 32.9036L57.6048 32.9108C57.737 33.1562 57.9249 33.3766 58.1559 33.5159L58.157 33.5166C58.1732 33.5263 58.1895 33.5351 58.1986 33.5401L58.2003 33.541L58.2124 33.5476L58.2157 33.5495C58.2164 33.5499 58.2167 33.5501 58.2168 33.5501L58.2168 33.5501L58.2309 33.5585L58.2456 33.5657C58.4561 33.6678 58.7156 33.7055 58.9584 33.5802L58.9584 33.5803L58.9657 33.5764C59.24 33.4272 59.3525 33.1416 59.3732 32.8779L59.3733 32.8779L59.3735 32.8744C59.5125 30.8734 60.2091 29.3523 61.2374 28.4249C62.2572 27.5053 63.6422 27.1331 65.2544 27.4942C65.5596 27.5637 65.8489 27.4553 66.0222 27.2073C66.1793 26.9826 66.2104 26.6908 66.1623 26.4128L66.1623 26.4124C66.1187 26.162 66.0026 25.9231 65.8615 25.7291C65.7277 25.5451 65.5516 25.3744 65.3528 25.2698Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75"
          }),
          t.jsx("path", {
            d: "M64.1982 19.1909L64.1658 19.2554L56.856 21.3302C54.8879 23.0879 53.7189 25.8623 53.4761 29.3554L53.1023 29.3254C53.1023 29.326 53.1022 29.3267 53.1022 29.3274C53.0808 29.5995 53.1572 29.8844 53.2841 30.1329L53.2841 30.1329L53.2854 30.1354C53.4166 30.3878 53.6096 30.606 53.8319 30.7433L53.8319 30.7433L53.8363 30.7459C53.8373 30.7465 53.8384 30.7472 53.8396 30.7479C53.855 30.7572 53.8931 30.7802 53.9427 30.7997C54.1765 30.908 54.4551 30.9303 54.695 30.7768C54.9338 30.6241 55.0368 30.3588 55.0529 30.0986C55.2724 26.9605 56.3668 24.549 58.0095 23.0685C59.6437 21.5957 61.8602 21.0072 64.4208 21.5802C64.7144 21.6489 65.0105 21.5534 65.1908 21.2896C65.3524 21.0568 65.3724 20.763 65.3306 20.5033L65.3306 20.5033L65.3299 20.4994C65.2503 20.0371 64.9407 19.5561 64.5321 19.3551L64.1982 19.1909Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75"
          }),
          t.jsx("path", {
            d: "M83.4297 34.0926V34.06L83.2202 33.9569C83.0001 33.8486 82.7413 33.8221 82.5086 33.9407C82.2773 34.0586 82.1462 34.2818 82.1002 34.5202L82.1002 34.5202L82.0998 34.5221C82.0488 34.7935 82.1033 35.0828 82.2135 35.339C82.3248 35.5981 82.4971 35.8337 82.7192 35.9985L82.9427 35.6974M83.4297 34.0926L83.0547 34.2934C82.7746 34.1556 82.5281 34.2823 82.4684 34.5914C82.4347 34.7701 82.4684 34.9824 82.558 35.1909C82.6476 35.3995 82.7821 35.5782 82.9427 35.6974M83.4297 34.0926C85.4188 35.5882 87.1917 37.7032 88.5602 40.2137C89.9456 42.7534 90.7924 45.4702 91.0025 48.0718L91.0027 48.0742C91.0224 48.3403 90.9637 48.6271 90.7662 48.8332C90.5375 49.0763 90.2163 49.0908 89.9533 48.9871L89.9519 48.9866L89.9423 48.9829C89.9371 48.9809 89.9286 48.9776 89.9194 48.9738C89.9046 48.9678 89.8812 48.9578 89.8547 48.9432M83.4297 34.0926L90.0909 48.6383M82.9427 35.6974C86.401 38.2818 89.0713 43.2012 89.4298 47.6514C89.4634 48.0536 89.7211 48.4595 90.0311 48.6122M82.9427 35.6974L82.7182 35.9978C86.087 38.5153 88.7058 43.3346 89.056 47.6815L89.0561 47.6826C89.0985 48.19 89.4137 48.7201 89.8547 48.9432M90.0311 48.6122L89.8386 48.934C89.8441 48.9373 89.8494 48.9403 89.8547 48.9432M90.0311 48.6122C90.0457 48.6209 90.0627 48.6274 90.0783 48.6334C90.0826 48.635 90.0868 48.6366 90.0909 48.6383M90.0311 48.6122L89.8654 48.9486C89.8618 48.9468 89.8583 48.9451 89.8547 48.9432M90.0909 48.6383C90.2515 48.7016 90.3971 48.6792 90.4942 48.575C90.5951 48.4707 90.6436 48.3031 90.6287 48.102L90.0909 48.6383Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75"
          }),
          t.jsx("path", {
            d: "M82.9551 30.1895C83.0613 30.4378 83.2328 30.6797 83.4576 30.8474C88.7275 34.7875 92.8104 42.303 93.3622 49.1005L93.3623 49.1014C93.4051 49.6132 93.7255 50.1485 94.1769 50.3682L94.1893 50.3742L94.1968 50.3772L94.2017 50.3796C94.2035 50.3805 94.2059 50.3817 94.2088 50.3831C94.2127 50.3851 94.2175 50.3874 94.2225 50.3898C94.2315 50.394 94.2438 50.3996 94.2581 50.4054L94.2595 50.4059C94.5264 50.5111 94.8437 50.4923 95.0737 50.2544C95.2731 50.0482 95.3332 49.7595 95.3085 49.4884C94.9972 45.6699 93.7548 41.6802 91.7199 37.9459L91.7199 37.9459C89.7004 34.2423 87.0832 31.119 84.1474 28.9259C84.0745 28.8703 84.0117 28.8363 83.9631 28.812L83.9635 28.8103C83.7433 28.702 83.4846 28.6755 83.2519 28.7941C83.0206 28.912 82.8895 29.1352 82.8434 29.3736L82.8434 29.3736L82.8428 29.3768C82.7922 29.6516 82.8497 29.943 82.9551 30.1895Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75"
          }),
          t.jsx("path", {
            d: "M42.9873 23.1406C42.9873 20.1324 40.5601 17.6882 37.5728 17.6882C40.5601 17.6882 42.9873 15.2441 42.9873 12.2358C42.9873 15.2441 45.4146 17.6882 48.4019 17.6882C45.4146 17.6882 42.9873 20.1324 42.9873 23.1406Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M102.745 73.8694C102.745 71.74 101.027 70.0099 98.9121 70.0099C101.027 70.0099 102.745 68.2799 102.745 66.1505C102.745 68.2799 104.463 70.0099 106.577 70.0099C104.463 70.0099 102.745 71.74 102.745 73.8694Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M110.641 47.2236C110.641 44.6931 108.599 42.637 106.086 42.637C108.599 42.637 110.641 40.581 110.641 38.0504C110.641 40.581 112.683 42.637 115.196 42.637C112.683 42.637 110.641 44.6931 110.641 47.2236Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-width": "0.75",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M22.7332 79.3623L22.9407 84.7691L17.3795 87.9956L17.4947 93.1015L11.9427 96.3789L12.0211 101.369L6.45517 104.623L6.10471 109.151L0.999939 112.391L1.05527 118.242L23.1621 131L42.9033 115.803L49.1978 89.1019L28.2899 76.4552L22.7332 79.3623Z",
            fill: "#CF59E2",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M45.1074 97.5918L39.5369 100.841L17.3794 87.9956L22.9499 84.746L45.1074 97.5918Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M50.4429 88.9862L44.8724 92.2358L22.7148 79.3947L28.0732 76.27L50.4429 88.9862Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M28.728 121.52L23.1575 124.769L0.999987 112.391L6.10936 109.141L28.728 121.52Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M34.1831 114.219L28.6172 117.002L6.45507 104.623L12.021 101.374L34.1831 114.219Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M39.666 105.947L34.0955 109.197L11.9334 96.3511L17.5039 93.1014L39.666 105.947Z",
            fill: "white",
            stroke: "#2F3137",
            "stroke-linecap": "round",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M44.9612 92.409L45.2112 97.7271L39.5808 100.953L39.6734 106.041L34.1403 109.294L34.0986 114.336L28.6164 117.069L28.6765 121.649L23.1619 124.797V131L50.7397 115.271L50.499 89.1416L44.9612 92.409Z",
            fill: "#2F3137",
            stroke: "#2F3137",
            "stroke-linejoin": "round"
          }),
          t.jsx("path", {
            d: "M122.416 69.9936C122.416 70.3091 122.22 70.6217 121.826 70.8597L78.6253 95.9742C78.2311 96.2149 77.4014 96.5209 76.8829 96.5209C76.3644 96.5209 75.363 96.4204 74.9662 96.1824L31.3592 70.7522C30.9624 70.5115 30.9225 70.0548 30.9199 69.7422C30.6761 70.3424 31.067 0.810303 31.067 0.810303H122.289C122.289 0.810303 122.416 69.8581 122.416 69.9936Z",
            fill: "url(#paint1_linear_1868_1667)",
            "fill-opacity": "0.85",
            style: {
              mixBlendMode: "color-dodge"
            }
          }),
          t.jsxs("defs", {
            children: [
              t.jsxs("linearGradient", {
                id: "paint0_linear_1868_1667",
                x1: "36.78",
                y1: "59.5784",
                x2: "122.31",
                y2: "84.1069",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {}),
                  t.jsx("stop", {
                    offset: "0.83",
                    "stop-color": "#610093"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint1_linear_1868_1667",
                x1: "76.6277",
                y1: "15.8431",
                x2: "76.3114",
                y2: "95.612",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#EB9FFF",
                    "stop-opacity": "0"
                  }),
                  t.jsx("stop", {
                    offset: "0.522249",
                    "stop-color": "#E379FF",
                    "stop-opacity": "0.73"
                  }),
                  t.jsx("stop", {
                    offset: "1",
                    "stop-color": "#8258FB"
                  })
                ]
              })
            ]
          })
        ]
      }),
      ...i
    });
  }, D3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "PushBot",
      illustration: t.jsxs("svg", {
        width: i.width ?? "48",
        height: i.height ?? "48",
        viewBox: "0 0 48 48",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("rect", {
            width: "48",
            height: "48",
            rx: "24",
            fill: "url(#paint0_linear_1854_13658)"
          }),
          t.jsx("path", {
            d: "M8.4575 21.7669C8.52329 20.9627 9.2188 20.3666 10.0114 20.4334L10.4532 20.4715C11.2458 20.5383 11.8333 21.244 11.7675 22.0482L11.3148 27.5444C11.249 28.3486 10.5534 28.9446 9.76081 28.8779L9.31906 28.8397C8.52642 28.773 7.93899 28.0673 8.00478 27.2631L8.4575 21.7669Z",
            fill: "url(#paint1_linear_1854_13658)"
          }),
          t.jsx("path", {
            d: "M39.5425 21.7669C39.4767 20.9627 38.7812 20.3666 37.9886 20.4334L37.5468 20.4715C36.7542 20.5383 36.1668 21.244 36.2326 22.0482L36.6853 27.5444C36.7511 28.3486 37.4466 28.9446 38.2392 28.8779L38.681 28.8397C39.4736 28.773 40.061 28.0673 39.9952 27.2631L39.5425 21.7669Z",
            fill: "url(#paint2_linear_1854_13658)"
          }),
          t.jsx("path", {
            d: "M38.0575 25.8326C38.0575 28.6903 37.6393 30.2321 36.7746 31.6562C34.84 34.8381 30.6763 36 23.9812 36C17.7058 36 13.6549 34.8636 11.5794 32.2204C10.4499 30.782 9.90479 29.0909 9.90479 25.831C9.90165 16.5838 14.4711 12 23.9796 12C32.6814 12 38.0575 16.5838 38.0575 25.8326Z",
            fill: "url(#paint3_linear_1854_13658)"
          }),
          t.jsx("path", {
            d: "M13.9072 22.7809L13.8508 31.3986C13.8461 32.16 14.739 32.5589 15.2889 32.0424L17.9018 29.5883C17.9315 29.5597 17.9707 29.5438 18.013 29.5454L28.6259 29.582C31.7995 29.6026 34.3889 27.0103 34.4093 23.7902C34.4297 20.57 31.8747 17.9428 28.7011 17.9221L18.7915 17.8903C16.1113 17.8728 13.9245 20.063 13.9072 22.7825V22.7809Z",
            fill: "black"
          }),
          t.jsx("path", {
            d: "M21.2979 22.6617C21.2979 21.7559 20.5741 21.0215 19.6813 21.0215C18.7885 21.0215 18.0647 21.7559 18.0647 22.6617V24.7931C18.0647 25.699 18.7885 26.4334 19.6813 26.4334C20.5741 26.4334 21.2979 25.699 21.2979 24.7931V22.6617Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M30.3802 22.6617C30.3802 21.7559 29.6564 21.0215 28.7636 21.0215C27.8708 21.0215 27.147 21.7559 27.147 22.6617V24.7931C27.147 25.699 27.8708 26.4334 28.7636 26.4334C29.6564 26.4334 30.3802 25.699 30.3802 24.7931V22.6617Z",
            fill: "white"
          }),
          t.jsxs("defs", {
            children: [
              t.jsxs("linearGradient", {
                id: "paint0_linear_1854_13658",
                x1: "24",
                y1: "0",
                x2: "24",
                y2: "48",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#E895DF"
                  }),
                  t.jsx("stop", {
                    offset: "1",
                    "stop-color": "#7792F1"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint1_linear_1854_13658",
                x1: "10.1321",
                y1: "31.0776",
                x2: "9.3048",
                y2: "10.1239",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.23",
                    "stop-color": "#CFC6EE"
                  }),
                  t.jsx("stop", {
                    offset: "0.47",
                    "stop-color": "white"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint2_linear_1854_13658",
                x1: "38.6105",
                y1: "32.5399",
                x2: "36.9416",
                y2: "6.79144",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.23",
                    "stop-color": "#CFC6EE"
                  }),
                  t.jsx("stop", {
                    offset: "0.54",
                    "stop-color": "white"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint3_linear_1854_13658",
                x1: "26.3324",
                y1: "38.6114",
                x2: "21.1496",
                y2: "11.1545",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.16",
                    "stop-color": "#CDC4ED"
                  }),
                  t.jsx("stop", {
                    offset: "1",
                    "stop-color": "white"
                  })
                ]
              })
            ]
          })
        ]
      }),
      ...i
    });
  }, v3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "PushDev",
      illustration: t.jsxs("svg", {
        width: i.width ?? "48",
        height: i.height ?? "48",
        viewBox: "0 0 48 48",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("rect", {
            width: "48",
            height: "48",
            rx: "24",
            fill: "url(#paint0_linear_1854_13657)"
          }),
          t.jsx("path", {
            d: "M8.4575 21.7669C8.52329 20.9627 9.2188 20.3666 10.0114 20.4334L10.4532 20.4715C11.2458 20.5383 11.8333 21.244 11.7675 22.0482L11.3148 27.5444C11.249 28.3486 10.5534 28.9446 9.76081 28.8779L9.31906 28.8397C8.52642 28.773 7.93899 28.0673 8.00478 27.2631L8.4575 21.7669Z",
            fill: "url(#paint1_linear_1854_13657)"
          }),
          t.jsx("path", {
            d: "M39.5425 21.7669C39.4767 20.9627 38.7812 20.3666 37.9886 20.4334L37.5468 20.4715C36.7542 20.5383 36.1668 21.244 36.2326 22.0482L36.6853 27.5444C36.7511 28.3486 37.4466 28.9446 38.2392 28.8779L38.681 28.8397C39.4736 28.773 40.061 28.0673 39.9952 27.2631L39.5425 21.7669Z",
            fill: "url(#paint2_linear_1854_13657)"
          }),
          t.jsx("path", {
            d: "M38.0575 25.8326C38.0575 28.6903 37.6393 30.2321 36.7746 31.6562C34.84 34.8381 30.6763 36 23.9812 36C17.7058 36 13.6549 34.8636 11.5794 32.2204C10.4499 30.782 9.90479 29.0909 9.90479 25.831C9.90165 16.5838 14.4711 12 23.9796 12C32.6814 12 38.0575 16.5838 38.0575 25.8326Z",
            fill: "url(#paint3_linear_1854_13657)"
          }),
          t.jsx("rect", {
            x: "13.8516",
            y: "17.8903",
            width: "20.5586",
            height: "12.0134",
            rx: "6",
            fill: "black"
          }),
          t.jsx("path", {
            d: "M22.3399 23.3232L19.6142 21.0165C19.3048 20.7546 18.8417 20.7932 18.5799 21.1027C18.3181 21.4121 18.3567 21.8753 18.6661 22.1371L20.7297 23.8835L18.6661 25.6299C18.3567 25.8918 18.3181 26.3549 18.5799 26.6643C18.8423 26.9745 19.3056 27.0117 19.6142 26.7505L22.3399 24.4438C22.6866 24.1504 22.6856 23.6158 22.3399 23.3232Z",
            fill: "white"
          }),
          t.jsx("path", {
            d: "M29.4561 25.4562H26.1538C25.7485 25.4562 25.4199 25.7848 25.4199 26.1902C25.4199 26.5956 25.7485 26.9242 26.1538 26.9242H29.4561C29.8614 26.9242 30.19 26.5956 30.19 26.1902C30.19 25.7848 29.8614 25.4562 29.4561 25.4562Z",
            fill: "white"
          }),
          t.jsxs("defs", {
            children: [
              t.jsxs("linearGradient", {
                id: "paint0_linear_1854_13657",
                x1: "24",
                y1: "0",
                x2: "24",
                y2: "48",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {}),
                  t.jsx("stop", {
                    offset: "1",
                    "stop-color": "#3C3A95"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint1_linear_1854_13657",
                x1: "10.1321",
                y1: "31.0776",
                x2: "9.3048",
                y2: "10.1239",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.23",
                    "stop-color": "#CFC6EE"
                  }),
                  t.jsx("stop", {
                    offset: "0.47",
                    "stop-color": "white"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint2_linear_1854_13657",
                x1: "38.6105",
                y1: "32.5399",
                x2: "36.9416",
                y2: "6.79144",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.23",
                    "stop-color": "#CFC6EE"
                  }),
                  t.jsx("stop", {
                    offset: "0.54",
                    "stop-color": "white"
                  })
                ]
              }),
              t.jsxs("linearGradient", {
                id: "paint3_linear_1854_13657",
                x1: "26.3324",
                y1: "38.6114",
                x2: "21.1496",
                y2: "11.1545",
                gradientUnits: "userSpaceOnUse",
                children: [
                  t.jsx("stop", {
                    "stop-color": "#D060ED"
                  }),
                  t.jsx("stop", {
                    offset: "0.16",
                    "stop-color": "#CDC4ED"
                  }),
                  t.jsx("stop", {
                    offset: "1",
                    "stop-color": "white"
                  })
                ]
              })
            ]
          })
        ]
      }),
      ...i
    });
  }, S3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "NotificationImg",
      illustration: t.jsxs("svg", {
        width: i.width ?? "56",
        height: i.height ?? "52",
        viewBox: "0 0 58 52",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M33.8301 11.2389L33.2232 11.4242L33.3076 11.7007L33.5716 11.8185L33.8301 11.2389ZM43.7593 35.9012L43.2014 36.2039L43.2064 36.2127L43.7593 35.9012ZM44.1171 37.2604L43.4825 37.2641V37.2641L44.1171 37.2604ZM43.7752 38.6243L43.2185 38.3194L43.2161 38.324L43.7752 38.6243ZM42.844 39.619L42.5121 39.078H42.5121L42.844 39.619ZM41.5692 39.9774L41.5735 39.3428H41.5692V39.9774ZM16.4305 39.9774V39.3428L16.4261 39.3428L16.4305 39.9774ZM15.1557 39.619L15.4875 39.078H15.4875L15.1557 39.619ZM14.2245 38.6243L14.7836 38.324L14.7811 38.3194L14.2245 38.6243ZM13.8825 37.2604L14.5171 37.2641L13.8825 37.2604ZM14.2403 35.9012L14.7933 36.2128L14.7981 36.2039L14.2403 35.9012ZM16.3035 23.7401H16.9381L16.9381 23.7393L16.3035 23.7401ZM17.2657 18.5593L16.674 18.3297V18.3297L17.2657 18.5593ZM20.0175 14.1671L20.4803 14.6014L20.0175 14.1671ZM24.1387 11.2344L23.8828 10.6536L23.8828 10.6536L24.1387 11.2344ZM24.176 11.218L24.43 11.7996L24.6963 11.6833L24.7822 11.4057L24.176 11.218ZM42.3308 23.8923C42.3308 17.9647 38.9373 12.8224 34.0887 10.6594L33.5716 11.8185C37.9426 13.7685 41.0615 18.4432 41.0615 23.8923H42.3308ZM42.3308 25.0932V23.8923H41.0615V25.0932H42.3308ZM44.3171 35.5984C43.4414 33.9851 42.3308 30.8127 42.3308 25.0932H41.0615C41.0615 30.9766 42.2045 34.3668 43.2015 36.2039L44.3171 35.5984ZM44.7517 37.2567C44.7483 36.6716 44.5975 36.0959 44.3122 35.5896L43.2064 36.2127C43.384 36.5279 43.4803 36.8911 43.4825 37.2641L44.7517 37.2567ZM44.3318 38.9292C44.611 38.4194 44.7551 37.8419 44.7517 37.2567L43.4825 37.2641C43.4846 37.6371 43.3926 38.0018 43.2186 38.3194L44.3318 38.9292ZM43.1758 40.16C43.6623 39.8615 44.0607 39.4338 44.3342 38.9246L43.2161 38.324C43.0452 38.6421 42.8009 38.901 42.5121 39.078L43.1758 40.16ZM41.5649 40.612C42.1328 40.6159 42.6889 40.4587 43.1758 40.16L42.5121 39.078C42.2238 39.2549 41.9 39.345 41.5735 39.3428L41.5649 40.612ZM16.4305 40.6121H41.5692V39.3428H16.4305V40.6121ZM14.8238 40.16C15.3108 40.4587 15.8669 40.6159 16.4348 40.612L16.4261 39.3428C16.0996 39.345 15.7758 39.2549 15.4875 39.078L14.8238 40.16ZM13.6654 38.9246C13.9389 39.4338 14.3373 39.8615 14.8238 40.16L15.4875 39.078C15.1988 38.901 14.9544 38.6421 14.7835 38.324L13.6654 38.9246ZM13.2479 37.2567C13.2445 37.8419 13.3886 38.4194 13.6679 38.9292L14.7811 38.3194C14.6071 38.0018 14.515 37.6371 14.5171 37.2641L13.2479 37.2567ZM13.6875 35.5896C13.4022 36.0959 13.2513 36.6716 13.2479 37.2567L14.5171 37.2641C14.5193 36.8911 14.6157 36.5279 14.7932 36.2127L13.6875 35.5896ZM15.6689 25.0932C15.6689 30.8127 14.5582 33.9851 13.6826 35.5985L14.7981 36.2039C15.7952 34.3668 16.9381 30.9766 16.9381 25.0932H15.6689ZM15.6689 23.7401V25.0932H16.9381V23.7401H15.6689ZM16.674 18.3297C16.008 20.0465 15.6667 21.8852 15.6689 23.7408L16.9381 23.7393C16.9361 22.0398 17.2488 20.3574 17.8573 18.7888L16.674 18.3297ZM19.5547 13.7329C18.3184 15.0505 17.3401 16.6129 16.674 18.3297L17.8573 18.7888C18.4659 17.2203 19.3579 15.7976 20.4803 14.6014L19.5547 13.7329ZM23.8828 10.6536C22.2615 11.3681 20.7911 12.4152 19.5547 13.7329L20.4803 14.6014C21.6027 13.4052 22.9332 12.4591 24.3946 11.8151L23.8828 10.6536ZM23.922 10.6364C23.9089 10.6421 23.8958 10.6479 23.8828 10.6536L24.3946 11.8151C24.4064 11.8099 24.4182 11.8047 24.43 11.7996L23.922 10.6364ZM24.7822 11.4057C25.3772 9.48363 27.0596 8.13731 28.9998 8.13731V6.86806C26.443 6.86806 24.3108 8.63659 23.5697 11.0303L24.7822 11.4057ZM28.9998 8.13731C30.9463 8.13731 32.6333 9.49238 33.2232 11.4242L34.4371 11.0536C33.7026 8.64798 31.565 6.86806 28.9998 6.86806V8.13731Z",
            fill: "#17181B"
          }),
          t.jsx("path", {
            d: "M28.9999 45.7931C32.0359 45.7931 34.4971 43.1894 34.4971 39.9775H23.5027C23.5027 43.1894 25.9639 45.7931 28.9999 45.7931Z",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M53.5416 32.286C55.6002 33.5742 56.7032 34.7555 56.5486 35.6487C56.0685 38.4666 42.9438 38.2086 27.864 35.233C12.7842 32.2573 0.968528 26.7321 1.44867 23.9142C1.75918 22.0909 7.30061 21.5019 15.2603 22.1189",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M11.9496 10.9518C11.9496 8.04052 9.60058 5.67509 6.70947 5.67509C9.60058 5.67509 11.9496 3.30967 11.9496 0.398376C11.9496 3.30967 14.2986 5.67509 17.1897 5.67509C14.2986 5.67509 11.9496 8.04052 11.9496 10.9518Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M49.4206 31.3339C49.4206 29.0179 47.5519 27.1361 45.252 27.1361C47.5519 27.1361 49.4206 25.2544 49.4206 22.9384C49.4206 25.2544 51.2893 27.1361 53.5892 27.1361C51.2893 27.1361 49.4206 29.0179 49.4206 31.3339Z",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("ellipse", {
            cx: "8.60313",
            cy: "29.2792",
            rx: "3.3463",
            ry: "3.38024",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("ellipse", {
            cx: "44.5889",
            cy: "47.9229",
            rx: "2.10846",
            ry: "2.12985",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("ellipse", {
            cx: "38.2101",
            cy: "16.4186",
            rx: "5.06511",
            ry: "5.11649",
            fill: "#F3AEFF",
            stroke: "#17181B",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          })
        ]
      }),
      ...i
    });
  }, A3 = (e) => {
    const { svgProps: s, ...i } = e;
    return t.jsx(n1, {
      componentName: "NotificationDark",
      illustration: t.jsxs("svg", {
        width: i.width ?? "58",
        height: i.height ?? "51",
        viewBox: "0 0 58 51",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        ...s,
        children: [
          t.jsx("path", {
            d: "M33.8302 10.8405L33.2232 11.0259L33.3077 11.3023L33.5717 11.4201L33.8302 10.8405ZM43.7594 35.5028L43.2015 35.8056L43.2065 35.8143L43.7594 35.5028ZM44.1172 36.8621L43.4826 36.8658V36.8658L44.1172 36.8621ZM43.7752 38.2259L43.2186 37.9211L43.2162 37.9256L43.7752 38.2259ZM42.844 39.2206L42.5122 38.6797H42.5122L42.844 39.2206ZM41.5692 39.5791L41.5736 38.9444H41.5692V39.5791ZM16.4305 39.5791V38.9444L16.4262 38.9444L16.4305 39.5791ZM15.1557 39.2206L15.4876 38.6797H15.4876L15.1557 39.2206ZM14.2246 38.2259L14.7836 37.9256L14.7812 37.9211L14.2246 38.2259ZM13.8826 36.8621L14.5172 36.8658L13.8826 36.8621ZM14.2404 35.5028L14.7934 35.8144L14.7982 35.8055L14.2404 35.5028ZM16.3036 23.3417H16.9382L16.9382 23.3409L16.3036 23.3417ZM17.2658 18.1609L16.6741 17.9314V17.9314L17.2658 18.1609ZM20.0176 13.7688L20.4804 14.203L20.0176 13.7688ZM24.1388 10.836L23.8828 10.2553L23.8828 10.2553L24.1388 10.836ZM24.1761 10.8196L24.43 11.4012L24.6964 11.2849L24.7823 11.0073L24.1761 10.8196ZM42.3308 23.4939C42.3308 17.5663 38.9374 12.4241 34.0888 10.261L33.5717 11.4201C37.9426 13.3701 41.0616 18.0448 41.0616 23.4939H42.3308ZM42.3308 24.6948V23.4939H41.0616V24.6948H42.3308ZM44.3171 35.2001C43.4415 33.5867 42.3308 30.4144 42.3308 24.6948H41.0616C41.0616 30.5782 42.2045 33.9685 43.2016 35.8055L44.3171 35.2001ZM44.7518 36.8584C44.7484 36.2732 44.5975 35.6975 44.3123 35.1913L43.2065 35.8143C43.384 36.1295 43.4804 36.4927 43.4826 36.8658L44.7518 36.8584ZM44.3318 38.5308C44.6111 38.021 44.7552 37.4435 44.7518 36.8584L43.4826 36.8658C43.4847 37.2388 43.3926 37.6034 43.2186 37.9211L44.3318 38.5308ZM43.1759 39.7616C43.6624 39.4632 44.0608 39.0354 44.3343 38.5263L43.2162 37.9256C43.0453 38.2437 42.8009 38.5026 42.5122 38.6797L43.1759 39.7616ZM41.5649 40.2137C42.1328 40.2175 42.6889 40.0603 43.1759 39.7616L42.5122 38.6797C42.2239 38.8565 41.9001 38.9467 41.5736 38.9444L41.5649 40.2137ZM16.4305 40.2137H41.5692V38.9444H16.4305V40.2137ZM14.8239 39.7616C15.3108 40.0603 15.8669 40.2175 16.4348 40.2137L16.4262 38.9444C16.0997 38.9467 15.7759 38.8565 15.4876 38.6797L14.8239 39.7616ZM13.6655 38.5263C13.939 39.0354 14.3374 39.4632 14.8239 39.7616L15.4876 38.6797C15.1989 38.5026 14.9545 38.2437 14.7836 37.9256L13.6655 38.5263ZM13.248 36.8584C13.2446 37.4435 13.3887 38.021 13.668 38.5308L14.7812 37.9211C14.6072 37.6034 14.5151 37.2388 14.5172 36.8658L13.248 36.8584ZM13.6875 35.1913C13.4022 35.6975 13.2514 36.2732 13.248 36.8584L14.5172 36.8658C14.5194 36.4927 14.6157 36.1295 14.7933 35.8143L13.6875 35.1913ZM15.6689 24.6948C15.6689 30.4144 14.5583 33.5867 13.6827 35.2001L14.7982 35.8055C15.7952 33.9685 16.9382 30.5782 16.9382 24.6948H15.6689ZM15.6689 23.3417V24.6948H16.9382V23.3417H15.6689ZM16.6741 17.9314C16.0081 19.6481 15.6668 21.4868 15.669 23.3424L16.9382 23.3409C16.9362 21.6414 17.2489 19.959 17.8574 18.3904L16.6741 17.9314ZM19.5548 13.3345C18.3185 14.6521 17.3402 16.2145 16.6741 17.9314L17.8574 18.3904C18.466 16.8219 19.3579 15.3992 20.4804 14.203L19.5548 13.3345ZM23.8828 10.2553C22.2616 10.9697 20.7912 12.0168 19.5548 13.3345L20.4804 14.203C21.6027 13.0068 22.9333 12.0607 24.3947 11.4167L23.8828 10.2553ZM23.9221 10.238C23.909 10.2438 23.8959 10.2495 23.8828 10.2553L24.3947 11.4167C24.4064 11.4115 24.4182 11.4064 24.43 11.4012L23.9221 10.238ZM24.7823 11.0073C25.3773 9.08525 27.0597 7.73893 28.9999 7.73893V6.46968C26.4431 6.46968 24.3109 8.23821 23.5698 10.632L24.7823 11.0073ZM28.9999 7.73893C30.9464 7.73893 32.6334 9.094 33.2232 11.0259L34.4372 10.6552C33.7027 8.2496 31.5651 6.46968 28.9999 6.46968V7.73893Z",
            fill: "#F5F6F8"
          }),
          t.jsx("path", {
            d: "M28.9999 45.3946C32.0359 45.3946 34.4971 42.7909 34.4971 39.5791H23.5027C23.5027 42.7909 25.9639 45.3946 28.9999 45.3946Z",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M53.5416 31.8876C55.6002 33.1758 56.7032 34.3572 56.5486 35.2503C56.0685 38.0682 42.9438 37.8103 27.864 34.8346C12.7842 31.859 0.968528 26.3337 1.44867 23.5158C1.75918 21.6925 7.30061 21.1035 15.2603 21.7205",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10",
            "stroke-linecap": "round"
          }),
          t.jsx("path", {
            d: "M11.9496 10.5534C11.9496 7.64214 9.60058 5.27672 6.70947 5.27672C9.60058 5.27672 11.9496 2.91129 11.9496 0C11.9496 2.91129 14.2986 5.27672 17.1897 5.27672C14.2986 5.27672 11.9496 7.64214 11.9496 10.5534Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("path", {
            d: "M49.4206 30.9355C49.4206 28.6195 47.5519 26.7378 45.252 26.7378C47.5519 26.7378 49.4206 24.856 49.4206 22.54C49.4206 24.856 51.2893 26.7378 53.5892 26.7378C51.2893 26.7378 49.4206 28.6195 49.4206 30.9355Z",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-miterlimit": "10"
          }),
          t.jsx("ellipse", {
            cx: "8.60313",
            cy: "28.8808",
            rx: "3.3463",
            ry: "3.38024",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("ellipse", {
            cx: "44.5889",
            cy: "47.5245",
            rx: "2.10846",
            ry: "2.12985",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          }),
          t.jsx("ellipse", {
            cx: "38.2101",
            cy: "16.0202",
            rx: "5.06511",
            ry: "5.11649",
            fill: "#CF59E2",
            stroke: "#F5F6F8",
            "stroke-width": "1.26925",
            "stroke-linecap": "round"
          })
        ]
      }),
      ...i
    });
  }, U1 = ({ title: e, stats: s, isLoading: i }) => t.jsxs(m, {
    display: "flex",
    padding: "spacing-sm spacing-md",
    borderRadius: "radius-sm",
    border: "border-sm solid stroke-secondary",
    backgroundColor: "surface-primary",
    flexDirection: "column",
    gap: "spacing-xxxs",
    children: [
      t.jsx(w, {
        variant: "h5-semibold",
        children: e
      }),
      t.jsx(a1, {
        isLoading: i,
        children: t.jsx(w, {
          variant: "h3-bold",
          children: s.toLocaleString()
        })
      })
    ]
  }), B3 = () => {
    const { data: e, isLoading: s } = F3(), { data: i, isLoading: r } = M3(), { data: o, isLoading: a } = j3();
    return t.jsxs(m, {
      backgroundColor: "surface-primary",
      borderRadius: "radius-md",
      padding: "spacing-md",
      display: "flex",
      gap: "spacing-sm",
      flexDirection: "column",
      minWidth: {
        initial: "22%",
        tb: "30%"
      },
      children: [
        t.jsx(w, {
          variant: "h4-bold",
          children: "Analytics Overview"
        }),
        t.jsx(U1, {
          title: "Notifications Sent",
          stats: e || 140902329,
          isLoading: s
        }),
        t.jsx(U1, {
          title: "Subscribers",
          stats: i || 296625,
          isLoading: r
        }),
        t.jsx(U1, {
          title: "Messages Sent",
          stats: o || 58834,
          isLoading: a
        })
      ]
    });
  }, Y1 = ({ allowSubscribe: e = true, channelAddress: s, refetchChannels: i, isLoading: r, onChangeProfileModalVisibility: o, profileModalVisibility: a }) => {
    var _a;
    const { data: n, isLoading: c } = g2(s), { wallet: l } = D1(), d = !!((_a = l == null ? void 0 : l.accounts) == null ? void 0 : _a.length), { data: p, refetch: C, isLoading: h } = A1(s, {
      enabled: d
    }), g = (n == null ? void 0 : n.alias_blockchain_id) && R2[+n.alias_blockchain_id], f = (n == null ? void 0 : n.alias_address) != null && (n == null ? void 0 : n.alias_address) != "NULL" && g, L = p && (p == null ? void 0 : p.length), x = () => {
      i == null ? void 0 : i(), C();
    };
    return t.jsx(a1, {
      isLoading: c || r,
      children: t.jsxs(m, {
        display: "flex",
        justifyContent: "space-between",
        margin: "spacing-xxs spacing-none",
        children: [
          t.jsxs(m, {
            display: "flex",
            gap: "spacing-xs",
            children: [
              t.jsx(m, {
                width: "40px",
                height: "40px",
                borderRadius: "radius-xs",
                css: R`
              overflow: hidden;
            `,
                children: t.jsx("img", {
                  width: "100%",
                  height: "100%",
                  src: n == null ? void 0 : n.iconV2,
                  alt: n == null ? void 0 : n.name
                })
              }),
              t.jsxs(m, {
                display: "flex",
                flexDirection: "column",
                children: [
                  t.jsxs(m, {
                    display: "flex",
                    gap: "spacing-xxs",
                    alignItems: "center",
                    children: [
                      t.jsx(i1, {
                        to: `/channels/${n == null ? void 0 : n.channel}`,
                        textProps: {
                          variant: "h5-semibold",
                          color: "text-primary"
                        },
                        children: n == null ? void 0 : n.name
                      }),
                      !!(n == null ? void 0 : n.verified_status) && t.jsx(U2, {
                        overlay: t.jsx(s3, {}),
                        children: t.jsx(m, {
                          cursor: "pointer",
                          display: "flex",
                          children: t.jsx(e3, {
                            color: "icon-tertiary",
                            size: 16
                          })
                        })
                      }),
                      t.jsx(z2, {
                        width: 16,
                        height: 16
                      }),
                      n && f && t.jsx(g, {
                        width: 16,
                        height: 16
                      })
                    ]
                  }),
                  t.jsxs(w, {
                    variant: "c-regular",
                    color: "text-tertiary-inverse",
                    children: [
                      G2((n == null ? void 0 : n.subscriber_count) || 0),
                      " subscribers"
                    ]
                  })
                ]
              })
            ]
          }),
          t.jsxs(a1, {
            isLoading: h,
            children: [
              e && n && !L && t.jsx($2, {
                onChangeProfileModalVisibility: o,
                profileModalVisibility: a,
                channelDetails: n,
                onSuccess: x,
                children: t.jsx(l1, {
                  size: "small",
                  iconOnly: t.jsx(u3, {}),
                  variant: "tertiary"
                })
              }),
              e && n && !!L && t.jsx(i3, {
                onChangeProfileModalVisibility: o,
                profileModalVisibility: a,
                channelDetail: n,
                onSuccess: x,
                userSetting: JSON.parse(p[0].user_settings),
                children: t.jsx(l1, {
                  size: "small",
                  iconOnly: t.jsx(n3, {}),
                  variant: "secondary"
                })
              })
            ]
          })
        ]
      })
    });
  }, P3 = [
    {
      chatParticipantAlias: "eip155:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666",
      payload: {
        chatId: "0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666",
        chatPic: D3,
        chatParticipant: "Push Bot",
        chatGroup: true,
        chatTimestamp: null,
        chatMsg: {
          messageType: "Text",
          messageContent: "Chat with your sassy sidekick!"
        }
      }
    },
    {
      chatParticipantAlias: "eip155:0x71Ffa5771E8019787190D098586EFe02026a3c8C",
      payload: {
        chatId: "0x71Ffa5771E8019787190D098586EFe02026a3c8C",
        chatPic: v3,
        chatParticipant: "Push Dev Buddy",
        chatGroup: true,
        chatTimestamp: null,
        chatMsg: {
          messageType: "Text",
          messageContent: "Chat with your coding companion!"
        }
      }
    },
    {
      chatParticipantAlias: "chatid:37799f9cb3ffd83eff4d2dc18913a3d9607f9c787a4374a7b3259bda28242cd6",
      payload: {
        chatId: "37799f9cb3ffd83eff4d2dc18913a3d9607f9c787a4374a7b3259bda28242cd6",
        chatPic: Q2,
        chatParticipant: "Push Alpha Comm",
        chatGroup: true,
        chatTimestamp: null,
        chatMsg: {
          messageType: "Text",
          messageContent: "VIP group for Push Fam!"
        }
      }
    }
  ], u2 = {
    prod: [
      "0x90A48D5CF7343B08dA12E067680B4C6dbfE551Be",
      "0xe56f1D3EDFFF1f25855aEF744caFE7991c224FFF",
      "0x983110309620D911731Ac0932219af06091b6744",
      "0x8Cd0ad5C55498Aacb72b6689E1da5A284C69c0C7",
      "0x57cD6665e725232123F5250328E35Db6ABf6d80C"
    ],
    alpha: [
      "0x90A48D5CF7343B08dA12E067680B4C6dbfE551Be",
      "0xe56f1D3EDFFF1f25855aEF744caFE7991c224FFF",
      "0x983110309620D911731Ac0932219af06091b6744",
      "0x8Cd0ad5C55498Aacb72b6689E1da5A284C69c0C7",
      "0x57cD6665e725232123F5250328E35Db6ABf6d80C"
    ],
    staging: [
      "0xB88460Bb2696CAb9D66013A05dFF29a28330689D",
      "0x9601f08b9EcB981D273B72e7f33964Cb98f977fe",
      "0x94c3016ef3e503774630fC71F59B8Da9f7D470B7",
      "0xa1016081D6Da53b4246178eD83922C55F7171e54",
      "0x08D77bD7500a07d791dD1323919C22e1FDb72224"
    ],
    dev: [
      "0xf9dF4b44Bb6BAf88074bb97C654bec0e4f137fE6",
      "0x778D3206374f8AC265728E18E3fE2Ae6b93E4ce4",
      "0x35B84d6848D16415177c64D64504663b998A6ab4",
      "0x74415Bc4C4Bf4Baecc2DD372426F0a1D016Fa924",
      "0xD8634C39BBFd4033c0d3289C4515275102423681"
    ]
  };
  new Date(Date.now()).toISOString().split("T")[0];
  new Date(Date.now() - 7 * 864e5).toISOString().split("T")[0];
  new Date(Date.now() - 14 * 864e5).toISOString().split("T")[0];
  const V3 = () => {
    var _a;
    return (_a = u2[L1.appEnv]) == null ? void 0 : _a.map((e, s) => t.jsxs(m, {
      children: [
        t.jsx(Y1, {
          allowSubscribe: false,
          channelAddress: e
        }, `${s}`),
        s != u2[L1.appEnv].length - 1 && t.jsx(W1, {})
      ]
    }));
  }, f2 = [
    "0xB88460Bb2696CAb9D66013A05dFF29a28330689D",
    "0x90A48D5CF7343B08dA12E067680B4C6dbfE551Be",
    "0xe56f1D3EDFFF1f25855aEF744caFE7991c224FFF",
    "0xf1A1542Ca902AE861B59bffE77D92E8CD76146f1",
    "0x76bA9825A5F707F133124E4608F1F2Dd1EF4006a"
  ], I3 = () => {
    const [e, s] = v.useState({
      isVisible: false,
      channel_id: null
    });
    return t.jsxs(t.Fragment, {
      children: [
        f2.map((i, r) => t.jsxs(m, {
          children: [
            t.jsx(Y1, {
              channelAddress: i,
              isLoading: false,
              refetchChannels: () => {
              },
              onChangeProfileModalVisibility: (o) => s(o),
              profileModalVisibility: e
            }),
            r != f2.length - 1 && t.jsx(W1, {})
          ]
        }, `${r}`)),
        (e == null ? void 0 : e.isVisible) && t.jsx(m, {
          display: "flex",
          justifyContent: "center",
          width: "-webkit-fill-available",
          alignItems: "center",
          css: R`
            z-index: 99999;
          `,
          children: t.jsx(J1, {
            type: Q1.MODAL,
            showConnectModal: true,
            onClose: () => s({
              isVisible: false,
              channel_id: null
            }),
            description: "Unlock your profile to proceed."
          })
        })
      ]
    });
  }, H3 = ({ heading: e, subHeading: s }) => t.jsxs(m, {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    gap: "spacing-sm",
    margin: "spacing-xl spacing-none spacing-none spacing-none",
    children: [
      t.jsx(f3, {
        size: 48,
        color: "icon-primary"
      }),
      t.jsxs(m, {
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        gap: "spacing-xs",
        children: [
          e && t.jsx(w, {
            textAlign: "center",
            variant: "h5-bold",
            color: "text-primary",
            children: e
          }),
          s && t.jsx(w, {
            textAlign: "center",
            variant: "bs-regular",
            color: "text-tertiary-inverse",
            children: s
          })
        ]
      }),
      t.jsx(i1, {
        to: "/channels",
        children: t.jsx(l1, {
          variant: "tertiary",
          size: "small",
          children: "Explore Channels"
        })
      })
    ]
  }), T3 = () => {
    const { data: e, isLoading: s, refetch: i, isSuccess: r } = A1(), o = s ? Array(5).fill(0) : e, [a, n] = v.useState({
      isVisible: false,
      channel_id: null
    });
    return t.jsxs(t.Fragment, {
      children: [
        r && !s && !(e == null ? void 0 : e.length) && t.jsx(H3, {
          heading: "No Channels Subscribed",
          subHeading: "Channels that you are subscribed to will show up here."
        }),
        o == null ? void 0 : o.map((c, l) => t.jsxs(m, {
          children: [
            t.jsx(Y1, {
              channelAddress: c.channel,
              isLoading: s,
              refetchChannels: i,
              onChangeProfileModalVisibility: (d) => n(d),
              profileModalVisibility: a
            }),
            l != o.length - 1 && t.jsx(W1, {})
          ]
        }, `${l}`)),
        (a == null ? void 0 : a.isVisible) && t.jsx(m, {
          display: "flex",
          justifyContent: "center",
          width: "-webkit-fill-available",
          alignItems: "center",
          css: R`
            z-index: 99999;
          `,
          children: t.jsx(J1, {
            type: Q1.MODAL,
            showConnectModal: true,
            onClose: () => n({
              isVisible: false,
              channel_id: null
            }),
            description: "Unlock your profile to proceed."
          })
        })
      ]
    });
  }, _3 = () => {
    var _a;
    const e = [
      {
        label: "Trending Channels",
        key: "trending",
        children: t.jsx(m, {
          display: "flex",
          flexDirection: "column",
          overflow: "hidden auto",
          borderRadius: "radius-md",
          minHeight: "285px",
          maxHeight: "285px",
          border: "border-sm solid stroke-secondary",
          padding: "spacing-xxs spacing-sm",
          children: t.jsx(I3, {})
        })
      },
      {
        label: "Hottest Channels",
        key: "hottest",
        children: t.jsx(m, {
          display: "flex",
          flexDirection: "column",
          overflow: "hidden auto",
          borderRadius: "radius-md",
          minHeight: "285px",
          maxHeight: "285px",
          border: "border-sm solid stroke-secondary",
          padding: "spacing-xxs spacing-sm",
          children: t.jsx(V3, {})
        })
      },
      {
        label: "Subscribed",
        key: "subscribed",
        children: t.jsx(m, {
          display: "flex",
          flexDirection: "column",
          overflow: "hidden auto",
          borderRadius: "radius-md",
          minHeight: "285px",
          maxHeight: "285px",
          border: "border-sm solid stroke-secondary",
          padding: "spacing-xxs spacing-sm",
          children: t.jsx(T3, {})
        })
      }
    ], [s, i] = v.useState(e[0].key), { wallet: r } = D1(), o = !!((_a = r == null ? void 0 : r.accounts) == null ? void 0 : _a.length);
    v.useEffect(() => {
      i(o ? s === "hottest" ? "subscribed" : s : s === "subscribed" ? "hottest" : s);
    }, [
      o
    ]);
    const a = (n, c) => c ? c ? n.filter((l) => l.key !== "hottest") : n : n.filter((l) => l.key !== "subscribed");
    return t.jsx(m, {
      display: "flex",
      flexDirection: "column",
      width: {
        ml: "100%",
        initial: "50%"
      },
      children: t.jsx(q2, {
        items: a(e, o),
        activeKey: s,
        variant: "fill",
        onChange: (n) => i(n)
      })
    });
  }, O3 = () => t.jsxs(m, {
    display: "flex",
    gap: "spacing-xs",
    borderRadius: "radius-md",
    padding: "spacing-sm",
    alignItems: "center",
    flexDirection: {
      ml: "column"
    },
    justifyContent: "space-between",
    css: R`
        background: radial-gradient(circle, rgba(222, 190, 255, 1) 0%, rgba(192, 255, 247, 1) 85%);
      `,
    children: [
      t.jsxs(m, {
        display: "flex",
        flexDirection: {
          ml: "column"
        },
        alignItems: "center",
        gap: "spacing-xs",
        children: [
          t.jsx(Y2, {
            svgProps: {
              width: 60,
              height: 56
            }
          }),
          t.jsx(w, {
            variant: "h5-semibold",
            display: {
              ml: "none",
              initial: "block"
            },
            color: "text-on-light-bg",
            children: "Complete Tasks on Push. Earn Push Points and Unlock Rewards."
          }),
          t.jsx(w, {
            variant: "h5-semibold",
            display: {
              ml: "block",
              initial: "none"
            },
            textAlign: "center",
            color: "text-on-light-bg",
            children: "Complete Tasks on Push. Earn Push Points and Unlock Rewards."
          })
        ]
      }),
      t.jsx(i1, {
        to: "/points",
        children: t.jsx(l1, {
          variant: "tertiary",
          size: "small",
          children: "Points Dashboard"
        })
      })
    ]
  }), N3 = ({ chat: e }) => {
    var _a, _b, _c;
    return t.jsxs(m, {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      children: [
        t.jsxs(m, {
          display: "flex",
          gap: "spacing-xs",
          justifyContent: "center",
          children: [
            t.jsx(e.payload.chatPic, {}),
            t.jsxs(m, {
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              children: [
                t.jsx(w, {
                  variant: "h5-semibold",
                  color: "text-primary",
                  children: (_a = e == null ? void 0 : e.payload) == null ? void 0 : _a.chatParticipant
                }),
                t.jsx(w, {
                  variant: "bs-regular",
                  color: "text-tertiary-inverse",
                  children: (_c = (_b = e == null ? void 0 : e.payload) == null ? void 0 : _b.chatMsg) == null ? void 0 : _c.messageContent
                })
              ]
            })
          ]
        }),
        t.jsx(i1, {
          to: `/chat/${e == null ? void 0 : e.chatParticipantAlias}`,
          isText: false,
          children: t.jsx(l1, {
            size: "small",
            iconOnly: t.jsx(C3, {}),
            variant: "tertiary"
          })
        })
      ]
    });
  }, R3 = () => t.jsx(m, {
    display: "flex",
    flexDirection: "column",
    gap: "spacing-sm",
    borderRadius: "radius-md",
    border: "border-sm solid stroke-secondary",
    padding: "spacing-sm",
    children: P3.map((e, s) => t.jsx(N3, {
      chat: e
    }, `${s}`))
  }), U3 = () => t.jsxs(m, {
    backgroundColor: "surface-primary",
    borderRadius: "radius-md",
    padding: "spacing-md",
    display: "flex",
    gap: "spacing-md",
    flexDirection: {
      ml: "column"
    },
    justifyContent: "space-between",
    children: [
      t.jsx(_3, {}),
      t.jsxs(m, {
        display: "flex",
        flexDirection: "column",
        width: {
          ml: "100%",
          initial: "50%"
        },
        gap: "spacing-md",
        children: [
          t.jsx(w, {
            color: "text-primary",
            variant: "h4-bold",
            children: "Recommended Chats"
          }),
          t.jsx(R3, {}),
          t.jsx(O3, {})
        ]
      })
    ]
  }), z3 = ({ setSubHeaderVisibility: e, showSubHeader: s }) => t.jsxs(m, {
    flexDirection: "row",
    display: "flex",
    justifyContent: "space-between",
    margin: s ? "spacing-none" : "spacing-none spacing-none spacing-sm spacing-none",
    children: [
      t.jsxs(m, {
        flexDirection: "row",
        display: "flex",
        gap: "spacing-xs",
        children: [
          t.jsx(w, {
            variant: "h3-semibold",
            children: "\u{1F44B}"
          }),
          t.jsx(w, {
            variant: "h3-semibold",
            color: "text-primary",
            children: "GM! Welcome to Push."
          })
        ]
      }),
      t.jsx(m, {
        display: "flex",
        alignItems: "center",
        onClick: () => e(!s),
        children: s ? t.jsx(x1, {
          icon: t.jsx(o3, {
            size: 20,
            color: "icon-tertiary"
          })
        }) : t.jsx(x1, {
          icon: t.jsx(r3, {
            size: 20,
            color: "icon-tertiary"
          })
        })
      })
    ]
  }), G3 = () => {
    const { mode: e } = K2();
    return t.jsxs(m, {
      display: "flex",
      flexDirection: {
        tb: "column",
        ml: "column",
        initial: "row"
      },
      padding: {
        ml: "spacing-none",
        initial: "spacing-lg spacing-md"
      },
      justifyContent: "space-between",
      gap: {
        tb: "spacing-xs",
        ml: "spacing-xs",
        initial: "spacing-md"
      },
      children: [
        t.jsxs(m, {
          display: "flex",
          flexDirection: "row",
          gap: "spacing-xs",
          alignItems: "center",
          width: {
            tb: "-webkit-fill-available",
            initial: "inherit"
          },
          children: [
            e === "dark" ? t.jsx(y3, {}) : t.jsx(Z3, {}),
            t.jsx(w, {
              variant: "h5-semibold",
              color: "text-primary",
              children: "Your communication super app for web3 & blockchain."
            })
          ]
        }),
        t.jsxs(m, {
          display: "flex",
          flexDirection: "row",
          gap: "spacing-xs",
          alignItems: "center",
          width: {
            tb: "-webkit-fill-available",
            initial: "inherit"
          },
          children: [
            e === "dark" ? t.jsx(A3, {}) : t.jsx(S3, {}),
            t.jsx(w, {
              variant: "h5-semibold",
              color: "text-primary",
              children: "Subscribe and get notifications from your favorite protocols."
            })
          ]
        }),
        t.jsxs(m, {
          display: "flex",
          flexDirection: "row",
          gap: "spacing-xs",
          alignItems: "center",
          width: {
            tb: "-webkit-fill-available",
            initial: "inherit"
          },
          children: [
            e === "dark" ? t.jsx(w3, {}) : t.jsx(b3, {}),
            t.jsx(w, {
              variant: "h5-semibold",
              color: "text-primary",
              children: "Send and receive chats. Join vibrant communities."
            })
          ]
        })
      ]
    });
  };
  function $3(e) {
    return Object.prototype.toString.call(e) === "[object Object]";
  }
  function h2(e) {
    return $3(e) || Array.isArray(e);
  }
  function q3() {
    return !!(typeof window < "u" && window.document && window.document.createElement);
  }
  function X1(e, s) {
    const i = Object.keys(e), r = Object.keys(s);
    if (i.length !== r.length) return false;
    const o = JSON.stringify(Object.keys(e.breakpoints || {})), a = JSON.stringify(Object.keys(s.breakpoints || {}));
    return o !== a ? false : i.every((n) => {
      const c = e[n], l = s[n];
      return typeof c == "function" ? `${c}` == `${l}` : !h2(c) || !h2(l) ? c === l : X1(c, l);
    });
  }
  function p2(e) {
    return e.concat().sort((s, i) => s.name > i.name ? 1 : -1).map((s) => s.options);
  }
  function K3(e, s) {
    if (e.length !== s.length) return false;
    const i = p2(e), r = p2(s);
    return i.every((o, a) => {
      const n = r[a];
      return X1(o, n);
    });
  }
  function t2(e) {
    return typeof e == "number";
  }
  function $1(e) {
    return typeof e == "string";
  }
  function P1(e) {
    return typeof e == "boolean";
  }
  function L2(e) {
    return Object.prototype.toString.call(e) === "[object Object]";
  }
  function P(e) {
    return Math.abs(e);
  }
  function e2(e) {
    return Math.sign(e);
  }
  function M1(e, s) {
    return P(e - s);
  }
  function W3(e, s) {
    if (e === 0 || s === 0 || P(e) <= P(s)) return 0;
    const i = M1(P(e), P(s));
    return P(i / e);
  }
  function J3(e) {
    return Math.round(e * 100) / 100;
  }
  function w1(e) {
    return Z1(e).map(Number);
  }
  function U(e) {
    return e[v1(e)];
  }
  function v1(e) {
    return Math.max(0, e.length - 1);
  }
  function s2(e, s) {
    return s === v1(e);
  }
  function x2(e, s = 0) {
    return Array.from(Array(e), (i, r) => s + r);
  }
  function Z1(e) {
    return Object.keys(e);
  }
  function F2(e, s) {
    return [
      e,
      s
    ].reduce((i, r) => (Z1(r).forEach((o) => {
      const a = i[o], n = r[o], c = L2(a) && L2(n);
      i[o] = c ? F2(a, n) : n;
    }), i), {});
  }
  function q1(e, s) {
    return typeof s.MouseEvent < "u" && e instanceof s.MouseEvent;
  }
  function Q3(e, s) {
    const i = {
      start: r,
      center: o,
      end: a
    };
    function r() {
      return 0;
    }
    function o(l) {
      return a(l) / 2;
    }
    function a(l) {
      return s - l;
    }
    function n(l, d) {
      return $1(e) ? i[e](l) : e(s, l, d);
    }
    return {
      measure: n
    };
  }
  function y1() {
    let e = [];
    function s(o, a, n, c = {
      passive: true
    }) {
      let l;
      if ("addEventListener" in o) o.addEventListener(a, n, c), l = () => o.removeEventListener(a, n, c);
      else {
        const d = o;
        d.addListener(n), l = () => d.removeListener(n);
      }
      return e.push(l), r;
    }
    function i() {
      e = e.filter((o) => o());
    }
    const r = {
      add: s,
      clear: i
    };
    return r;
  }
  function Y3(e, s, i, r) {
    const o = y1(), a = 1e3 / 60;
    let n = null, c = 0, l = 0;
    function d() {
      o.add(e, "visibilitychange", () => {
        e.hidden && f();
      });
    }
    function p() {
      g(), o.clear();
    }
    function C(x) {
      if (!l) return;
      n || (n = x, i(), i());
      const u = x - n;
      for (n = x, c += u; c >= a; ) i(), c -= a;
      const k = c / a;
      r(k), l && (l = s.requestAnimationFrame(C));
    }
    function h() {
      l || (l = s.requestAnimationFrame(C));
    }
    function g() {
      s.cancelAnimationFrame(l), n = null, c = 0, l = 0;
    }
    function f() {
      n = null, c = 0;
    }
    return {
      init: d,
      destroy: p,
      start: h,
      stop: g,
      update: i,
      render: r
    };
  }
  function X3(e, s) {
    const i = s === "rtl", r = e === "y", o = r ? "y" : "x", a = r ? "x" : "y", n = !r && i ? -1 : 1, c = p(), l = C();
    function d(f) {
      const { height: L, width: x } = f;
      return r ? L : x;
    }
    function p() {
      return r ? "top" : i ? "right" : "left";
    }
    function C() {
      return r ? "bottom" : i ? "left" : "right";
    }
    function h(f) {
      return f * n;
    }
    return {
      scroll: o,
      cross: a,
      startEdge: c,
      endEdge: l,
      measureSize: d,
      direction: h
    };
  }
  function u1(e = 0, s = 0) {
    const i = P(e - s);
    function r(d) {
      return d < e;
    }
    function o(d) {
      return d > s;
    }
    function a(d) {
      return r(d) || o(d);
    }
    function n(d) {
      return a(d) ? r(d) ? e : s : d;
    }
    function c(d) {
      return i ? d - i * Math.ceil((d - s) / i) : d;
    }
    return {
      length: i,
      max: s,
      min: e,
      constrain: n,
      reachedAny: a,
      reachedMax: o,
      reachedMin: r,
      removeOffset: c
    };
  }
  function M2(e, s, i) {
    const { constrain: r } = u1(0, e), o = e + 1;
    let a = n(s);
    function n(h) {
      return i ? P((o + h) % o) : r(h);
    }
    function c() {
      return a;
    }
    function l(h) {
      return a = n(h), C;
    }
    function d(h) {
      return p().set(c() + h);
    }
    function p() {
      return M2(e, c(), i);
    }
    const C = {
      get: c,
      set: l,
      add: d,
      clone: p
    };
    return C;
  }
  function t7(e, s, i, r, o, a, n, c, l, d, p, C, h, g, f, L, x, u, k) {
    const { cross: F, direction: Z } = e, y = [
      "INPUT",
      "SELECT",
      "TEXTAREA"
    ], E = {
      passive: false
    }, M = y1(), b = y1(), D = u1(50, 225).constrain(g.measure(20)), V = {
      mouse: 300,
      touch: 400
    }, S = {
      mouse: 500,
      touch: 600
    }, _ = f ? 43 : 25;
    let z = false, G = 0, $ = 0, c1 = false, r1 = false, Y = false, X = false;
    function m1(j) {
      if (!k) return;
      function A(T) {
        (P1(k) || k(j, T)) && k1(T);
      }
      const I = s;
      M.add(I, "dragstart", (T) => T.preventDefault(), E).add(I, "touchmove", () => {
      }, E).add(I, "touchend", () => {
      }).add(I, "touchstart", A).add(I, "mousedown", A).add(I, "touchcancel", H).add(I, "contextmenu", H).add(I, "click", e1, true);
    }
    function q() {
      M.clear(), b.clear();
    }
    function f1() {
      const j = X ? i : s;
      b.add(j, "touchmove", O, E).add(j, "touchend", H).add(j, "mousemove", O, E).add(j, "mouseup", H);
    }
    function h1(j) {
      const A = j.nodeName || "";
      return y.includes(A);
    }
    function t1() {
      return (f ? S : V)[X ? "mouse" : "touch"];
    }
    function g1(j, A) {
      const I = C.add(e2(j) * -1), T = p.byDistance(j, !f).distance;
      return f || P(j) < D ? T : x && A ? T * 0.5 : p.byIndex(I.get(), 0).distance;
    }
    function k1(j) {
      const A = q1(j, r);
      X = A, Y = f && A && !j.buttons && z, z = M1(o.get(), n.get()) >= 2, !(A && j.button !== 0) && (h1(j.target) || (c1 = true, a.pointerDown(j), d.useFriction(0).useDuration(0), o.set(n), f1(), G = a.readPoint(j), $ = a.readPoint(j, F), h.emit("pointerDown")));
    }
    function O(j) {
      if (!q1(j, r) && j.touches.length >= 2) return H(j);
      const I = a.readPoint(j), T = a.readPoint(j, F), K = M1(I, G), s1 = M1(T, $);
      if (!r1 && !X && (!j.cancelable || (r1 = K > s1, !r1))) return H(j);
      const d1 = a.pointerMove(j);
      K > L && (Y = true), d.useFriction(0.3).useDuration(0.75), c.start(), o.add(Z(d1)), j.preventDefault();
    }
    function H(j) {
      const I = p.byDistance(0, false).index !== C.get(), T = a.pointerUp(j) * t1(), K = g1(Z(T), I), s1 = W3(T, K), d1 = _ - 10 * s1, o1 = u + s1 / 50;
      r1 = false, c1 = false, b.clear(), d.useDuration(d1).useFriction(o1), l.distance(K, !f), X = false, h.emit("pointerUp");
    }
    function e1(j) {
      Y && (j.stopPropagation(), j.preventDefault(), Y = false);
    }
    function N() {
      return c1;
    }
    return {
      init: m1,
      destroy: q,
      pointerDown: N
    };
  }
  function e7(e, s) {
    let r, o;
    function a(C) {
      return C.timeStamp;
    }
    function n(C, h) {
      const f = `client${(h || e.scroll) === "x" ? "X" : "Y"}`;
      return (q1(C, s) ? C : C.touches[0])[f];
    }
    function c(C) {
      return r = C, o = C, n(C);
    }
    function l(C) {
      const h = n(C) - n(o), g = a(C) - a(r) > 170;
      return o = C, g && (r = C), h;
    }
    function d(C) {
      if (!r || !o) return 0;
      const h = n(o) - n(r), g = a(C) - a(r), f = a(C) - a(o) > 170, L = h / g;
      return g && !f && P(L) > 0.1 ? L : 0;
    }
    return {
      pointerDown: c,
      pointerMove: l,
      pointerUp: d,
      readPoint: n
    };
  }
  function s7() {
    function e(i) {
      const { offsetTop: r, offsetLeft: o, offsetWidth: a, offsetHeight: n } = i;
      return {
        top: r,
        right: o + a,
        bottom: r + n,
        left: o,
        width: a,
        height: n
      };
    }
    return {
      measure: e
    };
  }
  function i7(e) {
    function s(r) {
      return e * (r / 100);
    }
    return {
      measure: s
    };
  }
  function n7(e, s, i, r, o, a, n) {
    const c = [
      e
    ].concat(r);
    let l, d, p = [], C = false;
    function h(x) {
      return o.measureSize(n.measure(x));
    }
    function g(x) {
      if (!a) return;
      d = h(e), p = r.map(h);
      function u(k) {
        for (const F of k) {
          if (C) return;
          const Z = F.target === e, y = r.indexOf(F.target), E = Z ? d : p[y], M = h(Z ? e : r[y]);
          if (P(M - E) >= 0.5) {
            x.reInit(), s.emit("resize");
            break;
          }
        }
      }
      l = new ResizeObserver((k) => {
        (P1(a) || a(x, k)) && u(k);
      }), i.requestAnimationFrame(() => {
        c.forEach((k) => l.observe(k));
      });
    }
    function f() {
      C = true, l && l.disconnect();
    }
    return {
      init: g,
      destroy: f
    };
  }
  function r7(e, s, i, r, o, a) {
    let n = 0, c = 0, l = o, d = a, p = e.get(), C = 0;
    function h() {
      const E = r.get() - e.get(), M = !l;
      let b = 0;
      return M ? (n = 0, i.set(r), e.set(r), b = E) : (i.set(e), n += E / l, n *= d, p += n, e.add(n), b = p - C), c = e2(b), C = p, y;
    }
    function g() {
      const E = r.get() - s.get();
      return P(E) < 1e-3;
    }
    function f() {
      return l;
    }
    function L() {
      return c;
    }
    function x() {
      return n;
    }
    function u() {
      return F(o);
    }
    function k() {
      return Z(a);
    }
    function F(E) {
      return l = E, y;
    }
    function Z(E) {
      return d = E, y;
    }
    const y = {
      direction: L,
      duration: f,
      velocity: x,
      seek: h,
      settled: g,
      useBaseFriction: k,
      useBaseDuration: u,
      useFriction: Z,
      useDuration: F
    };
    return y;
  }
  function o7(e, s, i, r, o) {
    const a = o.measure(10), n = o.measure(50), c = u1(0.1, 0.99);
    let l = false;
    function d() {
      return !(l || !e.reachedAny(i.get()) || !e.reachedAny(s.get()));
    }
    function p(g) {
      if (!d()) return;
      const f = e.reachedMin(s.get()) ? "min" : "max", L = P(e[f] - s.get()), x = i.get() - s.get(), u = c.constrain(L / n);
      i.subtract(x * u), !g && P(x) < a && (i.set(e.constrain(i.get())), r.useDuration(25).useBaseFriction());
    }
    function C(g) {
      l = !g;
    }
    return {
      shouldConstrain: d,
      constrain: p,
      toggleActive: C
    };
  }
  function a7(e, s, i, r, o) {
    const a = u1(-s + e, 0), n = C(), c = p(), l = h();
    function d(f, L) {
      return M1(f, L) <= 1;
    }
    function p() {
      const f = n[0], L = U(n), x = n.lastIndexOf(f), u = n.indexOf(L) + 1;
      return u1(x, u);
    }
    function C() {
      return i.map((f, L) => {
        const { min: x, max: u } = a, k = a.constrain(f), F = !L, Z = s2(i, L);
        return F ? u : Z || d(x, k) ? x : d(u, k) ? u : k;
      }).map((f) => parseFloat(f.toFixed(3)));
    }
    function h() {
      if (s <= e + o) return [
        a.max
      ];
      if (r === "keepSnaps") return n;
      const { min: f, max: L } = c;
      return n.slice(f, L);
    }
    return {
      snapsContained: l,
      scrollContainLimit: c
    };
  }
  function l7(e, s, i) {
    const r = s[0], o = i ? r - e : U(s);
    return {
      limit: u1(o, r)
    };
  }
  function c7(e, s, i, r) {
    const a = s.min + 0.1, n = s.max + 0.1, { reachedMin: c, reachedMax: l } = u1(a, n);
    function d(h) {
      return h === 1 ? l(i.get()) : h === -1 ? c(i.get()) : false;
    }
    function p(h) {
      if (!d(h)) return;
      const g = e * (h * -1);
      r.forEach((f) => f.add(g));
    }
    return {
      loop: p
    };
  }
  function d7(e) {
    const { max: s, length: i } = e;
    function r(a) {
      const n = a - s;
      return i ? n / -i : 0;
    }
    return {
      get: r
    };
  }
  function C7(e, s, i, r, o) {
    const { startEdge: a, endEdge: n } = e, { groupSlides: c } = o, l = C().map(s.measure), d = h(), p = g();
    function C() {
      return c(r).map((L) => U(L)[n] - L[0][a]).map(P);
    }
    function h() {
      return r.map((L) => i[a] - L[a]).map((L) => -P(L));
    }
    function g() {
      return c(d).map((L) => L[0]).map((L, x) => L + l[x]);
    }
    return {
      snaps: d,
      snapsAligned: p
    };
  }
  function u7(e, s, i, r, o, a) {
    const { groupSlides: n } = o, { min: c, max: l } = r, d = p();
    function p() {
      const h = n(a), g = !e || s === "keepSnaps";
      return i.length === 1 ? [
        a
      ] : g ? h : h.slice(c, l).map((f, L, x) => {
        const u = !L, k = s2(x, L);
        if (u) {
          const F = U(x[0]) + 1;
          return x2(F);
        }
        if (k) {
          const F = v1(a) - U(x)[0] + 1;
          return x2(F, U(x)[0]);
        }
        return f;
      });
    }
    return {
      slideRegistry: d
    };
  }
  function f7(e, s, i, r, o) {
    const { reachedAny: a, removeOffset: n, constrain: c } = r;
    function l(f) {
      return f.concat().sort((L, x) => P(L) - P(x))[0];
    }
    function d(f) {
      const L = e ? n(f) : c(f), x = s.map((k, F) => ({
        diff: p(k - L, 0),
        index: F
      })).sort((k, F) => P(k.diff) - P(F.diff)), { index: u } = x[0];
      return {
        index: u,
        distance: L
      };
    }
    function p(f, L) {
      const x = [
        f,
        f + i,
        f - i
      ];
      if (!e) return f;
      if (!L) return l(x);
      const u = x.filter((k) => e2(k) === L);
      return u.length ? l(u) : U(x) - i;
    }
    function C(f, L) {
      const x = s[f] - o.get(), u = p(x, L);
      return {
        index: f,
        distance: u
      };
    }
    function h(f, L) {
      const x = o.get() + f, { index: u, distance: k } = d(x), F = !e && a(x);
      if (!L || F) return {
        index: u,
        distance: f
      };
      const Z = s[u] - k, y = f + p(Z, 0);
      return {
        index: u,
        distance: y
      };
    }
    return {
      byDistance: h,
      byIndex: C,
      shortcut: p
    };
  }
  function h7(e, s, i, r, o, a, n) {
    function c(C) {
      const h = C.distance, g = C.index !== s.get();
      a.add(h), h && (r.duration() ? e.start() : (e.update(), e.render(1), e.update())), g && (i.set(s.get()), s.set(C.index), n.emit("select"));
    }
    function l(C, h) {
      const g = o.byDistance(C, h);
      c(g);
    }
    function d(C, h) {
      const g = s.clone().set(C), f = o.byIndex(g.get(), h);
      c(f);
    }
    return {
      distance: l,
      index: d
    };
  }
  function p7(e, s, i, r, o, a, n, c) {
    const l = {
      passive: true,
      capture: true
    };
    let d = 0;
    function p(g) {
      if (!c) return;
      function f(L) {
        if ((/* @__PURE__ */ new Date()).getTime() - d > 10) return;
        n.emit("slideFocusStart"), e.scrollLeft = 0;
        const k = i.findIndex((F) => F.includes(L));
        t2(k) && (o.useDuration(0), r.index(k, 0), n.emit("slideFocus"));
      }
      a.add(document, "keydown", C, false), s.forEach((L, x) => {
        a.add(L, "focus", (u) => {
          (P1(c) || c(g, u)) && f(x);
        }, l);
      });
    }
    function C(g) {
      g.code === "Tab" && (d = (/* @__PURE__ */ new Date()).getTime());
    }
    return {
      init: p
    };
  }
  function F1(e) {
    let s = e;
    function i() {
      return s;
    }
    function r(l) {
      s = n(l);
    }
    function o(l) {
      s += n(l);
    }
    function a(l) {
      s -= n(l);
    }
    function n(l) {
      return t2(l) ? l : l.get();
    }
    return {
      get: i,
      set: r,
      add: o,
      subtract: a
    };
  }
  function b2(e, s) {
    const i = e.scroll === "x" ? n : c, r = s.style;
    let o = null, a = false;
    function n(h) {
      return `translate3d(${h}px,0px,0px)`;
    }
    function c(h) {
      return `translate3d(0px,${h}px,0px)`;
    }
    function l(h) {
      if (a) return;
      const g = J3(e.direction(h));
      g !== o && (r.transform = i(g), o = g);
    }
    function d(h) {
      a = !h;
    }
    function p() {
      a || (r.transform = "", s.getAttribute("style") || s.removeAttribute("style"));
    }
    return {
      clear: p,
      to: l,
      toggleActive: d
    };
  }
  function L7(e, s, i, r, o, a, n, c, l) {
    const p = w1(o), C = w1(o).reverse(), h = u().concat(k());
    function g(M, b) {
      return M.reduce((D, V) => D - o[V], b);
    }
    function f(M, b) {
      return M.reduce((D, V) => g(D, b) > 0 ? D.concat([
        V
      ]) : D, []);
    }
    function L(M) {
      return a.map((b, D) => ({
        start: b - r[D] + 0.5 + M,
        end: b + s - 0.5 + M
      }));
    }
    function x(M, b, D) {
      const V = L(b);
      return M.map((S) => {
        const _ = D ? 0 : -i, z = D ? i : 0, G = D ? "end" : "start", $ = V[S][G];
        return {
          index: S,
          loopPoint: $,
          slideLocation: F1(-1),
          translate: b2(e, l[S]),
          target: () => c.get() > $ ? _ : z
        };
      });
    }
    function u() {
      const M = n[0], b = f(C, M);
      return x(b, i, false);
    }
    function k() {
      const M = s - n[0] - 1, b = f(p, M);
      return x(b, -i, true);
    }
    function F() {
      return h.every(({ index: M }) => {
        const b = p.filter((D) => D !== M);
        return g(b, s) <= 0.1;
      });
    }
    function Z() {
      h.forEach((M) => {
        const { target: b, translate: D, slideLocation: V } = M, S = b();
        S !== V.get() && (D.to(S), V.set(S));
      });
    }
    function y() {
      h.forEach((M) => M.translate.clear());
    }
    return {
      canLoop: F,
      clear: y,
      loop: Z,
      loopPoints: h
    };
  }
  function x7(e, s, i) {
    let r, o = false;
    function a(l) {
      if (!i) return;
      function d(p) {
        for (const C of p) if (C.type === "childList") {
          l.reInit(), s.emit("slidesChanged");
          break;
        }
      }
      r = new MutationObserver((p) => {
        o || (P1(i) || i(l, p)) && d(p);
      }), r.observe(e, {
        childList: true
      });
    }
    function n() {
      r && r.disconnect(), o = true;
    }
    return {
      init: a,
      destroy: n
    };
  }
  function m7(e, s, i, r) {
    const o = {};
    let a = null, n = null, c, l = false;
    function d() {
      c = new IntersectionObserver((f) => {
        l || (f.forEach((L) => {
          const x = s.indexOf(L.target);
          o[x] = L;
        }), a = null, n = null, i.emit("slidesInView"));
      }, {
        root: e.parentElement,
        threshold: r
      }), s.forEach((f) => c.observe(f));
    }
    function p() {
      c && c.disconnect(), l = true;
    }
    function C(f) {
      return Z1(o).reduce((L, x) => {
        const u = parseInt(x), { isIntersecting: k } = o[u];
        return (f && k || !f && !k) && L.push(u), L;
      }, []);
    }
    function h(f = true) {
      if (f && a) return a;
      if (!f && n) return n;
      const L = C(f);
      return f && (a = L), f || (n = L), L;
    }
    return {
      init: d,
      destroy: p,
      get: h
    };
  }
  function g7(e, s, i, r, o, a) {
    const { measureSize: n, startEdge: c, endEdge: l } = e, d = i[0] && o, p = f(), C = L(), h = i.map(n), g = x();
    function f() {
      if (!d) return 0;
      const k = i[0];
      return P(s[c] - k[c]);
    }
    function L() {
      if (!d) return 0;
      const k = a.getComputedStyle(U(r));
      return parseFloat(k.getPropertyValue(`margin-${l}`));
    }
    function x() {
      return i.map((k, F, Z) => {
        const y = !F, E = s2(Z, F);
        return y ? h[F] + p : E ? h[F] + C : Z[F + 1][c] - k[c];
      }).map(P);
    }
    return {
      slideSizes: h,
      slideSizesWithGaps: g,
      startGap: p,
      endGap: C
    };
  }
  function k7(e, s, i, r, o, a, n, c, l) {
    const { startEdge: d, endEdge: p, direction: C } = e, h = t2(i);
    function g(u, k) {
      return w1(u).filter((F) => F % k === 0).map((F) => u.slice(F, F + k));
    }
    function f(u) {
      return u.length ? w1(u).reduce((k, F, Z) => {
        const y = U(k) || 0, E = y === 0, M = F === v1(u), b = o[d] - a[y][d], D = o[d] - a[F][p], V = !r && E ? C(n) : 0, S = !r && M ? C(c) : 0, _ = P(D - S - (b + V));
        return Z && _ > s + l && k.push(F), M && k.push(u.length), k;
      }, []).map((k, F, Z) => {
        const y = Math.max(Z[F - 1] || 0);
        return u.slice(y, k);
      }) : [];
    }
    function L(u) {
      return h ? g(u, i) : f(u);
    }
    return {
      groupSlides: L
    };
  }
  function j7(e, s, i, r, o, a, n) {
    const { align: c, axis: l, direction: d, startIndex: p, loop: C, duration: h, dragFree: g, dragThreshold: f, inViewThreshold: L, slidesToScroll: x, skipSnaps: u, containScroll: k, watchResize: F, watchSlides: Z, watchDrag: y, watchFocus: E } = a, M = 2, b = s7(), D = b.measure(s), V = i.map(b.measure), S = X3(l, d), _ = S.measureSize(D), z = i7(_), G = Q3(c, _), $ = !C && !!k, c1 = C || !!k, { slideSizes: r1, slideSizesWithGaps: Y, startGap: X, endGap: m1 } = g7(S, D, V, i, c1, o), q = k7(S, _, x, C, D, V, X, m1, M), { snaps: f1, snapsAligned: h1 } = C7(S, G, D, V, q), t1 = -U(f1) + U(Y), { snapsContained: g1, scrollContainLimit: k1 } = a7(_, t1, h1, k, M), O = $ ? g1 : h1, { limit: H } = l7(t1, O, C), e1 = M2(v1(O), p, C), N = e1.clone(), B = w1(i), j = ({ dragHandler: p1, scrollBody: _1, scrollBounds: O1, options: { loop: S1 } }) => {
      S1 || O1.constrain(p1.pointerDown()), _1.seek();
    }, A = ({ scrollBody: p1, translate: _1, location: O1, offsetLocation: S1, previousLocation: v2, scrollLooper: S2, slideLooper: A2, dragHandler: B2, animation: P2, eventHandler: o2, scrollBounds: V2, options: { loop: a2 } }, l2) => {
      const c2 = p1.settled(), I2 = !V2.shouldConstrain(), d2 = a2 ? c2 : c2 && I2;
      d2 && !B2.pointerDown() && (P2.stop(), o2.emit("settle")), d2 || o2.emit("scroll");
      const H2 = O1.get() * l2 + v2.get() * (1 - l2);
      S1.set(H2), a2 && (S2.loop(p1.direction()), A2.loop()), _1.to(S1.get());
    }, I = Y3(r, o, () => j(T1), (p1) => A(T1, p1)), T = 0.68, K = O[e1.get()], s1 = F1(K), d1 = F1(K), o1 = F1(K), C1 = F1(K), j1 = r7(s1, o1, d1, C1, h, T), I1 = f7(C, O, t1, H, C1), H1 = h7(I, e1, N, j1, I1, C1, n), i2 = d7(H), n2 = y1(), E2 = m7(s, i, n, L), { slideRegistry: r2 } = u7($, k, O, k1, q, B), D2 = p7(e, i, r2, H1, j1, n2, n, E), T1 = {
      ownerDocument: r,
      ownerWindow: o,
      eventHandler: n,
      containerRect: D,
      slideRects: V,
      animation: I,
      axis: S,
      dragHandler: t7(S, e, r, o, C1, e7(S, o), s1, I, H1, j1, I1, e1, n, z, g, f, u, T, y),
      eventStore: n2,
      percentOfView: z,
      index: e1,
      indexPrevious: N,
      limit: H,
      location: s1,
      offsetLocation: o1,
      previousLocation: d1,
      options: a,
      resizeHandler: n7(s, n, o, i, S, F, b),
      scrollBody: j1,
      scrollBounds: o7(H, o1, C1, j1, z),
      scrollLooper: c7(t1, H, o1, [
        s1,
        o1,
        d1,
        C1
      ]),
      scrollProgress: i2,
      scrollSnapList: O.map(i2.get),
      scrollSnaps: O,
      scrollTarget: I1,
      scrollTo: H1,
      slideLooper: L7(S, _, t1, r1, Y, f1, O, o1, i),
      slideFocus: D2,
      slidesHandler: x7(s, n, Z),
      slidesInView: E2,
      slideIndexes: B,
      slideRegistry: r2,
      slidesToScroll: q,
      target: C1,
      translate: b2(S, s)
    };
    return T1;
  }
  function F7() {
    let e = {}, s;
    function i(d) {
      s = d;
    }
    function r(d) {
      return e[d] || [];
    }
    function o(d) {
      return r(d).forEach((p) => p(s, d)), l;
    }
    function a(d, p) {
      return e[d] = r(d).concat([
        p
      ]), l;
    }
    function n(d, p) {
      return e[d] = r(d).filter((C) => C !== p), l;
    }
    function c() {
      e = {};
    }
    const l = {
      init: i,
      emit: o,
      off: n,
      on: a,
      clear: c
    };
    return l;
  }
  const M7 = {
    align: "center",
    axis: "x",
    container: null,
    slides: null,
    containScroll: "trimSnaps",
    direction: "ltr",
    slidesToScroll: 1,
    inViewThreshold: 0,
    breakpoints: {},
    dragFree: false,
    dragThreshold: 10,
    loop: false,
    skipSnaps: false,
    duration: 25,
    startIndex: 0,
    active: true,
    watchDrag: true,
    watchResize: true,
    watchSlides: true,
    watchFocus: true
  };
  function b7(e) {
    function s(a, n) {
      return F2(a, n || {});
    }
    function i(a) {
      const n = a.breakpoints || {}, c = Z1(n).filter((l) => e.matchMedia(l).matches).map((l) => n[l]).reduce((l, d) => s(l, d), {});
      return s(a, c);
    }
    function r(a) {
      return a.map((n) => Z1(n.breakpoints || {})).reduce((n, c) => n.concat(c), []).map(e.matchMedia);
    }
    return {
      mergeOptions: s,
      optionsAtMedia: i,
      optionsMediaQueries: r
    };
  }
  function w7(e) {
    let s = [];
    function i(a, n) {
      return s = n.filter(({ options: c }) => e.optionsAtMedia(c).active !== false), s.forEach((c) => c.init(a, e)), n.reduce((c, l) => Object.assign(c, {
        [l.name]: l
      }), {});
    }
    function r() {
      s = s.filter((a) => a.destroy());
    }
    return {
      init: i,
      destroy: r
    };
  }
  function B1(e, s, i) {
    const r = e.ownerDocument, o = r.defaultView, a = b7(o), n = w7(a), c = y1(), l = F7(), { mergeOptions: d, optionsAtMedia: p, optionsMediaQueries: C } = a, { on: h, off: g, emit: f } = l, L = S;
    let x = false, u, k = d(M7, B1.globalOptions), F = d(k), Z = [], y, E, M;
    function b() {
      const { container: B, slides: j } = F;
      E = ($1(B) ? e.querySelector(B) : B) || e.children[0];
      const I = $1(j) ? E.querySelectorAll(j) : j;
      M = [].slice.call(I || E.children);
    }
    function D(B) {
      const j = j7(e, E, M, r, o, B, l);
      if (B.loop && !j.slideLooper.canLoop()) {
        const A = Object.assign({}, B, {
          loop: false
        });
        return D(A);
      }
      return j;
    }
    function V(B, j) {
      x || (k = d(k, B), F = p(k), Z = j || Z, b(), u = D(F), C([
        k,
        ...Z.map(({ options: A }) => A)
      ]).forEach((A) => c.add(A, "change", S)), F.active && (u.translate.to(u.location.get()), u.animation.init(), u.slidesInView.init(), u.slideFocus.init(N), u.eventHandler.init(N), u.resizeHandler.init(N), u.slidesHandler.init(N), u.options.loop && u.slideLooper.loop(), E.offsetParent && M.length && u.dragHandler.init(N), y = n.init(N, Z)));
    }
    function S(B, j) {
      const A = q();
      _(), V(d({
        startIndex: A
      }, B), j), l.emit("reInit");
    }
    function _() {
      u.dragHandler.destroy(), u.eventStore.clear(), u.translate.clear(), u.slideLooper.clear(), u.resizeHandler.destroy(), u.slidesHandler.destroy(), u.slidesInView.destroy(), u.animation.destroy(), n.destroy(), c.clear();
    }
    function z() {
      x || (x = true, c.clear(), _(), l.emit("destroy"), l.clear());
    }
    function G(B, j, A) {
      !F.active || x || (u.scrollBody.useBaseFriction().useDuration(j === true ? 0 : F.duration), u.scrollTo.index(B, A || 0));
    }
    function $(B) {
      const j = u.index.add(1).get();
      G(j, B, -1);
    }
    function c1(B) {
      const j = u.index.add(-1).get();
      G(j, B, 1);
    }
    function r1() {
      return u.index.add(1).get() !== q();
    }
    function Y() {
      return u.index.add(-1).get() !== q();
    }
    function X() {
      return u.scrollSnapList;
    }
    function m1() {
      return u.scrollProgress.get(u.location.get());
    }
    function q() {
      return u.index.get();
    }
    function f1() {
      return u.indexPrevious.get();
    }
    function h1() {
      return u.slidesInView.get();
    }
    function t1() {
      return u.slidesInView.get(false);
    }
    function g1() {
      return y;
    }
    function k1() {
      return u;
    }
    function O() {
      return e;
    }
    function H() {
      return E;
    }
    function e1() {
      return M;
    }
    const N = {
      canScrollNext: r1,
      canScrollPrev: Y,
      containerNode: H,
      internalEngine: k1,
      destroy: z,
      off: g,
      on: h,
      emit: f,
      plugins: g1,
      previousScrollSnap: f1,
      reInit: L,
      rootNode: O,
      scrollNext: $,
      scrollPrev: c1,
      scrollProgress: m1,
      scrollSnapList: X,
      scrollTo: G,
      selectedScrollSnap: q,
      slideNodes: e1,
      slidesInView: h1,
      slidesNotInView: t1
    };
    return V(s, i), setTimeout(() => l.emit("init"), 0), N;
  }
  B1.globalOptions = void 0;
  function V1(e = {}, s = []) {
    const i = v.useRef(e), r = v.useRef(s), [o, a] = v.useState(), [n, c] = v.useState(), l = v.useCallback(() => {
      o && o.reInit(i.current, r.current);
    }, [
      o
    ]);
    return v.useEffect(() => {
      X1(i.current, e) || (i.current = e, l());
    }, [
      e,
      l
    ]), v.useEffect(() => {
      K3(r.current, s) || (r.current = s, l());
    }, [
      s,
      l
    ]), v.useEffect(() => {
      if (q3() && n) {
        B1.globalOptions = V1.globalOptions;
        const d = B1(n, i.current, r.current);
        return a(d), () => d.destroy();
      } else a(void 0);
    }, [
      n,
      a
    ]), [
      c,
      o
    ];
  }
  V1.globalOptions = void 0;
  let w2, Z2, Z7, y7, E7, D7, v7, S7, y2, A7, B7, P7, V7;
  w2 = (e) => {
    var _a, _b;
    const { channelAddress: s, onChangeProfileModalVisibility: i, profileModalVisibility: r } = e, { wallet: o } = D1(), a = !!((_a = o == null ? void 0 : o.accounts) == null ? void 0 : _a.length), { data: n, isLoading: c } = g2(s, 36e5), { refetch: l } = A1(), { data: d, refetch: p, isLoading: C } = A1(s, {
      enabled: a
    }), h = !!(d && (d == null ? void 0 : d.length)), g = () => {
      p(), l();
    };
    return t.jsx(l3, {
      channelDetails: n,
      isLoading: c,
      isSubscribed: h,
      isSubscriptionLoading: C,
      handleRefetch: g,
      userSettings: JSON.parse(((_b = d == null ? void 0 : d[0]) == null ? void 0 : _b.user_settings) || "[]"),
      onChangeProfileModalVisibility: i,
      profileModalVisibility: r
    });
  };
  Z2 = (e) => {
    const [s, i] = v.useState(true), [r, o] = v.useState(true), a = v.useCallback(() => {
      e && e.scrollPrev();
    }, [
      e
    ]), n = v.useCallback(() => {
      e && e.scrollNext();
    }, [
      e
    ]), c = v.useCallback((l) => {
      i(!l.canScrollPrev()), o(!l.canScrollNext());
    }, []);
    return v.useEffect(() => {
      e && (c(e), e.on("reInit", c).on("select", c));
    }, [
      e,
      c
    ]), {
      prevBtnDisabled: s,
      nextBtnDisabled: r,
      onPrevButtonClick: a,
      onNextButtonClick: n
    };
  };
  Z7 = ({ featuredChannelsList: e, onChangeProfileModalVisibility: s, profileModalVisibility: i }) => {
    const r = z1(parseInt(G1.tablet)), o = z1(parseInt(G1.laptop)), a = {
      slidesToScroll: r || o ? 2 : 3,
      align: "start"
    }, [n, c] = V1(a), { prevBtnDisabled: l, nextBtnDisabled: d, onPrevButtonClick: p, onNextButtonClick: C } = Z2(c);
    return t.jsxs(t.Fragment, {
      children: [
        t.jsxs(m, {
          display: "flex",
          justifyContent: "space-between",
          flexDirection: {
            tb: "column"
          },
          gap: {
            tb: "spacing-xs"
          },
          width: "100%",
          children: [
            t.jsx(w, {
              variant: "h4-bold",
              color: "text-primary",
              children: "Featured Notification Channels"
            }),
            t.jsxs(m, {
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: "spacing-sm",
              children: [
                t.jsx(i1, {
                  to: "/channels",
                  textProps: {
                    variant: "h5-semibold",
                    color: "text-primary"
                  },
                  children: "View All"
                }),
                t.jsxs(m, {
                  display: "flex",
                  flexDirection: "row",
                  children: [
                    t.jsx(x1, {
                      onClick: p,
                      defaultColor: "icon-primary",
                      disabled: l,
                      icon: t.jsx(j2, {
                        size: 24
                      })
                    }),
                    t.jsx(x1, {
                      onClick: C,
                      defaultColor: "icon-primary",
                      disabled: d,
                      icon: t.jsx(k2, {
                        size: 24
                      })
                    })
                  ]
                })
              ]
            })
          ]
        }),
        t.jsx(m, {
          width: {
            initial: "67rem",
            tb: "42rem",
            lp: "42rem"
          },
          children: t.jsx(m, {
            css: R`
            overflow: hidden;
          `,
            ref: n,
            children: t.jsx(m, {
              gap: "spacing-md",
              display: "flex",
              css: R`
              backface-visibility: hidden;
              touch-action: pan-y pinch-zoom;
            `,
              children: e.map((h) => t.jsx(w2, {
                channelAddress: h.channel,
                onChangeProfileModalVisibility: s,
                profileModalVisibility: i
              }))
            })
          })
        })
      ]
    });
  };
  y7 = ({ featuredChannelsList: e, onChangeProfileModalVisibility: s, profileModalVisibility: i }) => {
    const r = {
      slidesToScroll: "auto",
      align: "start"
    }, [o, a] = V1(r), { prevBtnDisabled: n, nextBtnDisabled: c, onPrevButtonClick: l, onNextButtonClick: d } = Z2(a);
    return t.jsxs(t.Fragment, {
      children: [
        t.jsxs(m, {
          display: "flex",
          justifyContent: "space-between",
          flexDirection: {
            tb: "column"
          },
          gap: {
            tb: "spacing-xs"
          },
          alignSelf: "baseline",
          children: [
            t.jsx(w, {
              variant: "h4-bold",
              color: "text-primary",
              children: "Featured Notification Channels"
            }),
            t.jsxs(m, {
              display: "flex",
              flexDirection: "row",
              alignItems: "center",
              gap: "spacing-sm",
              children: [
                t.jsx(i1, {
                  to: "/channels",
                  textProps: {
                    variant: "h5-semibold",
                    color: "text-primary"
                  },
                  children: "View All"
                }),
                t.jsxs(m, {
                  display: "flex",
                  flexDirection: "row",
                  children: [
                    t.jsx(x1, {
                      onClick: l,
                      defaultColor: "icon-primary",
                      disabled: n,
                      icon: t.jsx(j2, {
                        size: 24
                      })
                    }),
                    t.jsx(x1, {
                      onClick: d,
                      defaultColor: "icon-primary",
                      disabled: c,
                      icon: t.jsx(k2, {
                        size: 24
                      })
                    })
                  ]
                })
              ]
            })
          ]
        }),
        t.jsx(m, {
          width: "20rem",
          css: R`
          overflow: hidden;
        `,
          ref: o,
          children: t.jsx(m, {
            gap: "spacing-md",
            display: "flex",
            css: R`
            backface-visibility: hidden;
            touch-action: pan-y pinch-zoom;
          `,
            children: e.map((p) => t.jsx(m, {
              css: R`
                  flex: 0 0 100%;
                `,
              gap: "spacing-md",
              display: "flex",
              flexDirection: "column",
              children: p.map((C) => t.jsx(w2, {
                channelAddress: C.channel,
                onChangeProfileModalVisibility: s,
                profileModalVisibility: i
              }))
            }))
          })
        })
      ]
    });
  };
  E7 = [
    {
      id: 1,
      channel: "0x74415Bc4C4Bf4Baecc2DD372426F0a1D016Fa924"
    },
    {
      id: 2,
      channel: "0x0000000000000000000000000000000000000000"
    },
    {
      id: 3,
      channel: "0x778D3206374f8AC265728E18E3fE2Ae6b93E4ce4"
    },
    {
      id: 4,
      channel: "0xf9dF4b44Bb6BAf88074bb97C654bec0e4f137fE6"
    },
    {
      id: 5,
      channel: "0x35B84d6848D16415177c64D64504663b998A6ab4"
    },
    {
      id: 6,
      channel: "0x4e97Bc6129dfe5b4b5f527049BC18DcC4925Fd62"
    },
    {
      id: 7,
      channel: "0xD8634C39BBFd4033c0d3289C4515275102423681"
    },
    {
      id: 8,
      channel: "0xfFA1aF9E558B68bBC09ad74058331c100C135280"
    },
    {
      id: 9,
      channel: "0x2177cFc66474bBEce7Cbf114d780A5cfE78485De"
    }
  ];
  D7 = [
    {
      id: 1,
      channel: "0x74415Bc4C4Bf4Baecc2DD372426F0a1D016Fa924"
    },
    {
      id: 2,
      channel: "0x9601f08b9EcB981D273B72e7f33964Cb98f977fe"
    },
    {
      id: 3,
      channel: "0x94c3016ef3e503774630fC71F59B8Da9f7D470B7"
    },
    {
      id: 4,
      channel: "0xa1016081D6Da53b4246178eD83922C55F7171e54"
    },
    {
      id: 5,
      channel: "0x08D77bD7500a07d791dD1323919C22e1FDb72224"
    },
    {
      id: 6,
      channel: "0x463308c3CF49C0C7947D4fA5C94E2077a6572068"
    },
    {
      id: 7,
      channel: "0x0000000000000000000000000000000000000000"
    },
    {
      id: 8,
      channel: "0x5ac9E6205eACA2bBbA6eF716FD9AabD76326EEee"
    },
    {
      id: 9,
      channel: "0xD8634C39BBFd4033c0d3289C4515275102423681"
    }
  ];
  v7 = [
    {
      id: 1,
      channel: "0xdbBc2Ac8cb8D02B26F165b4BC120fd4b14DA6cDA"
    },
    {
      id: 2,
      channel: "0x991552E1C2A96D0Ae72E19552b08A1889aebCF53"
    },
    {
      id: 3,
      channel: "0x0f0aE1ceEBc4b5aB14A47202eD6A52D3ef698b5B"
    },
    {
      id: 4,
      channel: "0x48De2669db5C2da4bf36C29ef9CFd62057B4b6C8"
    },
    {
      id: 5,
      channel: "0xe56f1D3EDFFF1f25855aEF744caFE7991c224FFF"
    },
    {
      id: 6,
      channel: "0x4E15B14B9950A04370E36f2Ec05546ED5867ADeF"
    },
    {
      id: 7,
      channel: "0x76bA9825A5F707F133124E4608F1F2Dd1EF4006a"
    },
    {
      id: 8,
      channel: "0xef6426D522CfE5B7Ae5dB05623aB0Ef78023dBe0"
    },
    {
      id: 9,
      channel: "0xde3e447E125FA2391DC9BCbfA0B821424422FEAF"
    }
  ];
  S7 = [
    {
      id: 1,
      channel: "0x65bB67c2416186aE3107F7c2C6728b272a579e3d"
    },
    {
      id: 2,
      channel: "0xf198eBCc8dB86F707bAdDdBa236aB5b619c59D3c"
    },
    {
      id: 3,
      channel: "0x0f0aE1ceEBc4b5aB14A47202eD6A52D3ef698b5B"
    },
    {
      id: 4,
      channel: "0x48De2669db5C2da4bf36C29ef9CFd62057B4b6C8"
    },
    {
      id: 5,
      channel: "0xe56f1D3EDFFF1f25855aEF744caFE7991c224FFF"
    },
    {
      id: 6,
      channel: "0x4E15B14B9950A04370E36f2Ec05546ED5867ADeF"
    },
    {
      id: 7,
      channel: "0x76bA9825A5F707F133124E4608F1F2Dd1EF4006a"
    },
    {
      id: 8,
      channel: "0xef6426D522CfE5B7Ae5dB05623aB0Ef78023dBe0"
    },
    {
      id: 9,
      channel: "0xde3e447E125FA2391DC9BCbfA0B821424422FEAF"
    }
  ];
  y2 = {
    dev: E7,
    staging: D7,
    prod: v7,
    alpha: S7
  };
  A7 = y2[L1.appEnv].reduce((e, s, i) => {
    const r = Math.floor(i / 3);
    return e[r] || (e[r] = []), e[r].push(s), e;
  }, []);
  B7 = () => {
    const e = y2[L1.appEnv], i = z1(parseInt(G1.mobileL)), [r, o] = v.useState({
      isVisible: false,
      channel_id: null
    });
    return t.jsxs(m, {
      borderRadius: "radius-md",
      padding: {
        ml: "spacing-md spacing-sm",
        initial: "spacing-md"
      },
      display: "flex",
      flexDirection: "column",
      backgroundColor: "surface-primary",
      gap: {
        ml: "spacing-sm",
        initial: "spacing-xxs"
      },
      alignItems: "flex-start",
      children: [
        i ? t.jsx(y7, {
          featuredChannelsList: A7,
          onChangeProfileModalVisibility: (a) => o(a),
          profileModalVisibility: r
        }) : t.jsx(Z7, {
          featuredChannelsList: e,
          onChangeProfileModalVisibility: (a) => o(a),
          profileModalVisibility: r
        }),
        (r == null ? void 0 : r.isVisible) && t.jsx(m, {
          display: "flex",
          justifyContent: "center",
          width: "-webkit-fill-available",
          alignItems: "center",
          css: R`
            z-index: 99999;
          `,
          children: t.jsx(J1, {
            type: Q1.MODAL,
            showConnectModal: true,
            onClose: () => o({
              isVisible: false,
              channel_id: null
            }),
            description: "Unlock your profile to proceed."
          })
        })
      ]
    });
  };
  P7 = () => {
    const { poolStats: e, pushPoolStats: s } = h3();
    return t.jsxs(m, {
      backgroundColor: "surface-primary",
      borderRadius: "radius-md",
      padding: "spacing-md",
      display: "flex",
      gap: "spacing-md",
      width: "-webkit-fill-available",
      flexDirection: "column",
      children: [
        t.jsxs(m, {
          display: "flex",
          alignItems: {
            initial: "flex-start",
            tb: "center"
          },
          justifyContent: "space-between",
          width: "-webkit-fill-available",
          flexDirection: {
            initial: "row",
            tb: "column"
          },
          textAlign: {
            tb: "center"
          },
          gap: {
            initial: "spacing-none",
            tb: "spacing-sm"
          },
          children: [
            t.jsxs(m, {
              maxWidth: "303px",
              children: [
                t.jsx(w, {
                  variant: "h4-semibold",
                  children: "Staking Pools"
                }),
                t.jsx(w, {
                  variant: "bes-regular",
                  color: "text-tertiary-inverse",
                  children: "Stake to support network decentralization and earn staking rewards every epoch."
                })
              ]
            }),
            t.jsxs(m, {
              display: "flex",
              gap: {
                initial: "spacing-md",
                ml: "spacing-sm"
              },
              flexDirection: {
                initial: "row",
                ml: "column"
              },
              children: [
                t.jsxs(m, {
                  children: [
                    t.jsx(w, {
                      variant: "h5-semibold",
                      children: "Total Value Locked"
                    }),
                    t.jsx(a1, {
                      isLoading: !(e == null ? void 0 : e.totalValueLocked),
                      children: t.jsx(w, {
                        variant: "h3-bold",
                        children: `$${Number(e == null ? void 0 : e.totalValueLocked.toFixed(2)).toLocaleString()}`
                      })
                    })
                  ]
                }),
                t.jsxs(m, {
                  children: [
                    t.jsx(w, {
                      variant: "h5-semibold",
                      children: "Rewards Paid"
                    }),
                    t.jsx(a1, {
                      isLoading: !(e == null ? void 0 : e.pushRewardsDistributed) || !e.totalDistributedAmount,
                      children: t.jsx(w, {
                        variant: "h3-bold",
                        children: (e == null ? void 0 : e.pushRewardsDistributed) && (e == null ? void 0 : e.totalDistributedAmount) ? `${Math.min(R1(e == null ? void 0 : e.pushRewardsDistributed), R1(e == null ? void 0 : e.totalDistributedAmount)).toLocaleString()}` : 0
                      })
                    })
                  ]
                })
              ]
            })
          ]
        }),
        t.jsxs(m, {
          display: "flex",
          gap: {
            initial: "spacing-sm",
            tb: "spacing-md"
          },
          width: "-webkit-fill-available",
          flexDirection: {
            initial: "row",
            tb: "column"
          },
          children: [
            t.jsxs(m, {
              padding: "spacing-md",
              display: "flex",
              flexDirection: "column",
              justifyContent: "space-between",
              alignItems: "center",
              borderRadius: "radius-md",
              border: "border-sm solid stroke-secondary",
              width: {
                tb: "-webkit-fill-available",
                initial: "65%"
              },
              gap: {
                initial: "spacing-none",
                tb: "spacing-md"
              },
              children: [
                t.jsxs(m, {
                  display: "flex",
                  alignItems: "center",
                  gap: "spacing-xxs",
                  flexDirection: "column",
                  children: [
                    t.jsx(m, {
                      border: "border-sm solid stroke-secondary",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      width: "48px",
                      height: "48px",
                      borderRadius: "radius-lg",
                      flexDirection: "column",
                      children: t.jsx(c3, {
                        width: 24,
                        height: 24
                      })
                    }),
                    t.jsxs(m, {
                      alignItems: "center",
                      display: "flex",
                      flexDirection: "column",
                      children: [
                        t.jsx(w, {
                          variant: "h4-semibold",
                          children: "Push Fee Staking Pool"
                        }),
                        t.jsx(w, {
                          variant: "bes-regular",
                          color: "text-tertiary-inverse",
                          textAlign: "center",
                          children: "Stake any amount of PUSH to receive rewards and a slice of the fees earned by the protocol."
                        })
                      ]
                    }),
                    t.jsxs(m, {
                      display: {
                        initial: "flex",
                        ml: "block"
                      },
                      gap: "spacing-lg",
                      children: [
                        t.jsxs(m, {
                          display: "flex",
                          alignItems: "center",
                          flexDirection: "column",
                          children: [
                            t.jsx(a1, {
                              isLoading: !(s == null ? void 0 : s.stakingAPR),
                              children: t.jsxs(w, {
                                variant: "h3-bold",
                                color: "text-state-success-bold",
                                children: [
                                  "~",
                                  s == null ? void 0 : s.stakingAPR.toLocaleString(),
                                  "%"
                                ]
                              })
                            }),
                            t.jsx(w, {
                              color: "text-tertiary-inverse",
                              variant: "c-regular",
                              children: "APR + Fees"
                            })
                          ]
                        }),
                        t.jsxs(m, {
                          display: "flex",
                          alignItems: "center",
                          flexDirection: "column",
                          children: [
                            t.jsx(a1, {
                              isLoading: !(s == null ? void 0 : s.totalStakedAmount) || !(e == null ? void 0 : e.pushPrice),
                              children: t.jsxs(w, {
                                variant: "h3-bold",
                                children: [
                                  "$",
                                  (s == null ? void 0 : s.totalStakedAmount) && (e == null ? void 0 : e.pushPrice) ? (R1(s == null ? void 0 : s.totalStakedAmount) * (e == null ? void 0 : e.pushPrice.toFixed(2))).toLocaleString() : 0
                                ]
                              })
                            }),
                            t.jsx(w, {
                              color: "text-tertiary-inverse",
                              variant: "c-regular",
                              children: "Staked"
                            })
                          ]
                        })
                      ]
                    })
                  ]
                }),
                t.jsx(i1, {
                  to: "/yieldv2",
                  isText: false,
                  children: t.jsx(l1, {
                    size: "small",
                    children: "Stake & Earn Rewards"
                  })
                })
              ]
            }),
            t.jsxs(m, {
              display: "flex",
              flexDirection: "column",
              borderRadius: "radius-md",
              padding: "spacing-md",
              width: {
                tb: "-webkit-fill-available",
                initial: "55%"
              },
              css: R`
            background: linear-gradient(269deg, #eeb4fd 0.85%, #dad1ff 99.15%);
          `,
              gap: "spacing-xs",
              alignItems: {
                initial: "flex-start",
                tb: "center"
              },
              textAlign: {
                initial: "start",
                tb: "center"
              },
              children: [
                t.jsx(E3, {}),
                t.jsxs(m, {
                  width: "80%",
                  children: [
                    t.jsx(w, {
                      variant: "h4-bold",
                      color: "text-on-light-bg",
                      children: "Earn & Grow with Push."
                    }),
                    t.jsx(w, {
                      variant: "bs-regular",
                      color: "text-on-light-bg",
                      children: "Earn rewards on fees earned by the protocol. Stake to earn."
                    })
                  ]
                }),
                t.jsx(i1, {
                  to: "https://push.org/docs/tokenomics/",
                  isText: false,
                  target: "_blank",
                  children: t.jsxs(m, {
                    display: "flex",
                    alignItems: "center",
                    color: "text-brand-medium",
                    children: [
                      t.jsx(w, {
                        color: "text-brand-medium",
                        variant: "bm-semibold",
                        children: "Learn More"
                      }),
                      t.jsx(a3, {
                        size: 18
                      })
                    ]
                  })
                })
              ]
            })
          ]
        })
      ]
    });
  };
  V7 = () => {
    const { isWalletConnected: e, account: s } = D1(), i = W2({
      account: s
    }), { data: r } = J2({
      caip10WalletAddress: i
    }), [o, a] = v.useState(true), [n, c] = v.useState(""), [l, d] = v.useState(""), p = [
      "notifications_integration_email_telegram_discord"
    ], { data: C, isLoading: h } = X2({
      userId: r == null ? void 0 : r.userId,
      activityTypes: p
    }, {
      enabled: !!(r == null ? void 0 : r.userId) && p.length > 0
    }), f = ((L) => L && typeof L.status == "string")(C == null ? void 0 : C.notifications_integration_email_telegram_discord) && C.notifications_integration_email_telegram_discord.status === "COMPLETED";
    return t.jsxs(m, {
      flexDirection: "column",
      display: "flex",
      width: {
        initial: "auto",
        ml: "357px"
      },
      margin: {
        initial: "spacing-sm spacing-xl",
        ml: "spacing-sm spacing-none"
      },
      gap: {
        ml: "spacing-md"
      },
      height: "100%",
      children: [
        t.jsx(z3, {
          showSubHeader: o,
          setSubHeaderVisibility: a
        }),
        o && t.jsx(G3, {}),
        t.jsxs(m, {
          display: "flex",
          flexDirection: "column",
          gap: "spacing-md",
          children: [
            l && t.jsx(m, {
              margin: "spacing-sm spacing-none spacing-none spacing-none",
              children: t.jsx(C2, {
                variant: "success",
                heading: l
              })
            }),
            n && t.jsx(m, {
              margin: "spacing-sm spacing-none spacing-none spacing-none",
              children: t.jsx(C2, {
                variant: "error",
                heading: n
              })
            }),
            e && t.jsx(t3, {
              errorMessage: n,
              setErrorMessage: c,
              successMessage: l,
              setSuccessMessage: d,
              padding: {
                ml: "spacing-md spacing-sm",
                initial: "spacing-md"
              },
              claimButton: t.jsx(a1, {
                isLoading: h,
                children: f ? t.jsx(l1, {
                  variant: "tertiary",
                  size: "small",
                  disabled: true,
                  children: "Claimed"
                }) : t.jsx(i1, {
                  to: "/points/activity",
                  children: t.jsx(l1, {
                    "aria-label": "Claim",
                    size: "small",
                    variant: "tertiary",
                    children: "Claim"
                  })
                })
              })
            }),
            t.jsx(B7, {}),
            t.jsx(U3, {}),
            t.jsxs(m, {
              display: "flex",
              flexDirection: {
                initial: "row",
                ml: "column"
              },
              gap: "spacing-md",
              children: [
                t.jsx(B3, {}),
                t.jsx(P7, {})
              ]
            })
          ]
        })
      ]
    });
  };
  t6 = () => t.jsx(d3, {
    children: t.jsx(V7, {})
  });
});
export {
  __tla,
  t6 as default
};
